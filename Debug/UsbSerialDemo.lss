
UsbSerialDemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000131e  000013b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000131e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800110  00800110  000013c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000059f6  00000000  00000000  000016ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001caa  00000000  00000000  000070a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007f07  00000000  00000000  00008d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009dc  00000000  00000000  00010c54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00016f29  00000000  00000000  00011630  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003f29  00000000  00000000  00028559  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000bf0  00000000  00000000  0002c482  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00006e02  00000000  00000000  0002d072  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a8 c0       	rjmp	.+336    	; 0x152 <__ctors_end>
       2:	00 00       	nop
       4:	c5 c0       	rjmp	.+394    	; 0x190 <__bad_interrupt>
       6:	00 00       	nop
       8:	c3 c0       	rjmp	.+390    	; 0x190 <__bad_interrupt>
       a:	00 00       	nop
       c:	c1 c0       	rjmp	.+386    	; 0x190 <__bad_interrupt>
       e:	00 00       	nop
      10:	bf c0       	rjmp	.+382    	; 0x190 <__bad_interrupt>
      12:	00 00       	nop
      14:	bd c0       	rjmp	.+378    	; 0x190 <__bad_interrupt>
      16:	00 00       	nop
      18:	bb c0       	rjmp	.+374    	; 0x190 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b9 c0       	rjmp	.+370    	; 0x190 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b7 c0       	rjmp	.+366    	; 0x190 <__bad_interrupt>
      22:	00 00       	nop
      24:	b5 c0       	rjmp	.+362    	; 0x190 <__bad_interrupt>
      26:	00 00       	nop
      28:	5e c6       	rjmp	.+3260   	; 0xce6 <__vector_10>
      2a:	00 00       	nop
      2c:	b1 c0       	rjmp	.+354    	; 0x190 <__bad_interrupt>
      2e:	00 00       	nop
      30:	af c0       	rjmp	.+350    	; 0x190 <__bad_interrupt>
      32:	00 00       	nop
      34:	ad c0       	rjmp	.+346    	; 0x190 <__bad_interrupt>
      36:	00 00       	nop
      38:	ab c0       	rjmp	.+342    	; 0x190 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a9 c0       	rjmp	.+338    	; 0x190 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a7 c0       	rjmp	.+334    	; 0x190 <__bad_interrupt>
      42:	00 00       	nop
      44:	a5 c0       	rjmp	.+330    	; 0x190 <__bad_interrupt>
      46:	00 00       	nop
      48:	a3 c0       	rjmp	.+326    	; 0x190 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a1 c0       	rjmp	.+322    	; 0x190 <__bad_interrupt>
      4e:	00 00       	nop
      50:	9f c0       	rjmp	.+318    	; 0x190 <__bad_interrupt>
      52:	00 00       	nop
      54:	9d c0       	rjmp	.+314    	; 0x190 <__bad_interrupt>
      56:	00 00       	nop
      58:	9b c0       	rjmp	.+310    	; 0x190 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	99 c0       	rjmp	.+306    	; 0x190 <__bad_interrupt>
      5e:	00 00       	nop
      60:	97 c0       	rjmp	.+302    	; 0x190 <__bad_interrupt>
      62:	00 00       	nop
      64:	95 c0       	rjmp	.+298    	; 0x190 <__bad_interrupt>
      66:	00 00       	nop
      68:	93 c0       	rjmp	.+294    	; 0x190 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	91 c0       	rjmp	.+290    	; 0x190 <__bad_interrupt>
      6e:	00 00       	nop
      70:	8f c0       	rjmp	.+286    	; 0x190 <__bad_interrupt>
      72:	00 00       	nop
      74:	8d c0       	rjmp	.+282    	; 0x190 <__bad_interrupt>
      76:	00 00       	nop
      78:	8b c0       	rjmp	.+278    	; 0x190 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	89 c0       	rjmp	.+274    	; 0x190 <__bad_interrupt>
      7e:	00 00       	nop
      80:	87 c0       	rjmp	.+270    	; 0x190 <__bad_interrupt>
      82:	00 00       	nop
      84:	85 c0       	rjmp	.+266    	; 0x190 <__bad_interrupt>
      86:	00 00       	nop
      88:	83 c0       	rjmp	.+262    	; 0x190 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	81 c0       	rjmp	.+258    	; 0x190 <__bad_interrupt>
      8e:	00 00       	nop
      90:	7f c0       	rjmp	.+254    	; 0x190 <__bad_interrupt>
      92:	00 00       	nop
      94:	7d c0       	rjmp	.+250    	; 0x190 <__bad_interrupt>
	...

00000098 <ProductString>:
      98:	26 03 4c 00 55 00 46 00 41 00 20 00 4b 00 65 00     &.L.U.F.A. .K.e.
      a8:	79 00 62 00 6f 00 61 00 72 00 64 00 20 00 44 00     y.b.o.a.r.d. .D.
      b8:	65 00 6d 00 6f 00 00 00                             e.m.o...

000000c0 <ManufacturerString>:
      c0:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      d0:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000da <LanguageString>:
      da:	04 03 09 04                                         ....

000000de <ConfigurationDescriptor>:
      de:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
      ee:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
      fe:	00 05                                               ..

00000100 <DeviceDescriptor>:
     100:	12 01 10 01 00 00 00 08 eb 03 42 20 01 00 01 02     ..........B ....
     110:	00 01                                               ..

00000112 <KeyboardReport>:
     112:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     122:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
     132:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
     142:	26 ff 00 05 07 19 00 29 ff 95 06 75 08 81 00 c0     &......)...u....

00000152 <__ctors_end>:
     152:	11 24       	eor	r1, r1
     154:	1f be       	out	0x3f, r1	; 63
     156:	cf ef       	ldi	r28, 0xFF	; 255
     158:	d0 e2       	ldi	r29, 0x20	; 32
     15a:	de bf       	out	0x3e, r29	; 62
     15c:	cd bf       	out	0x3d, r28	; 61

0000015e <__do_copy_data>:
     15e:	11 e0       	ldi	r17, 0x01	; 1
     160:	a0 e0       	ldi	r26, 0x00	; 0
     162:	b1 e0       	ldi	r27, 0x01	; 1
     164:	ee e1       	ldi	r30, 0x1E	; 30
     166:	f3 e1       	ldi	r31, 0x13	; 19
     168:	00 e0       	ldi	r16, 0x00	; 0
     16a:	0b bf       	out	0x3b, r16	; 59
     16c:	02 c0       	rjmp	.+4      	; 0x172 <__do_copy_data+0x14>
     16e:	07 90       	elpm	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	a0 31       	cpi	r26, 0x10	; 16
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <__do_copy_data+0x10>

00000178 <__do_clear_bss>:
     178:	21 e0       	ldi	r18, 0x01	; 1
     17a:	a0 e1       	ldi	r26, 0x10	; 16
     17c:	b1 e0       	ldi	r27, 0x01	; 1
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	a5 32       	cpi	r26, 0x25	; 37
     184:	b2 07       	cpc	r27, r18
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
     188:	0e 94 ed 08 	call	0x11da	; 0x11da <main>
     18c:	0c 94 8d 09 	jmp	0x131a	; 0x131a <_exit>

00000190 <__bad_interrupt>:
     190:	37 cf       	rjmp	.-402    	; 0x0 <__vectors>

00000192 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     192:	29 2f       	mov	r18, r25
     194:	33 27       	eor	r19, r19
     196:	23 30       	cpi	r18, 0x03	; 3
     198:	31 05       	cpc	r19, r1
     19a:	c9 f0       	breq	.+50     	; 0x1ce <CALLBACK_USB_GetDescriptor+0x3c>
     19c:	38 f4       	brcc	.+14     	; 0x1ac <CALLBACK_USB_GetDescriptor+0x1a>
     19e:	21 30       	cpi	r18, 0x01	; 1
     1a0:	31 05       	cpc	r19, r1
     1a2:	59 f0       	breq	.+22     	; 0x1ba <CALLBACK_USB_GetDescriptor+0x28>
     1a4:	22 30       	cpi	r18, 0x02	; 2
     1a6:	31 05       	cpc	r19, r1
     1a8:	69 f0       	breq	.+26     	; 0x1c4 <CALLBACK_USB_GetDescriptor+0x32>
     1aa:	35 c0       	rjmp	.+106    	; 0x216 <CALLBACK_USB_GetDescriptor+0x84>
     1ac:	21 32       	cpi	r18, 0x21	; 33
     1ae:	31 05       	cpc	r19, r1
     1b0:	41 f1       	breq	.+80     	; 0x202 <CALLBACK_USB_GetDescriptor+0x70>
     1b2:	22 32       	cpi	r18, 0x22	; 34
     1b4:	31 05       	cpc	r19, r1
     1b6:	51 f1       	breq	.+84     	; 0x20c <CALLBACK_USB_GetDescriptor+0x7a>
     1b8:	2e c0       	rjmp	.+92     	; 0x216 <CALLBACK_USB_GetDescriptor+0x84>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     1ba:	82 e1       	ldi	r24, 0x12	; 18
     1bc:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     1be:	20 e0       	ldi	r18, 0x00	; 0
     1c0:	31 e0       	ldi	r19, 0x01	; 1
     1c2:	32 c0       	rjmp	.+100    	; 0x228 <CALLBACK_USB_GetDescriptor+0x96>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     1c4:	82 e2       	ldi	r24, 0x22	; 34
     1c6:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     1c8:	2e ed       	ldi	r18, 0xDE	; 222
     1ca:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     1cc:	2d c0       	rjmp	.+90     	; 0x228 <CALLBACK_USB_GetDescriptor+0x96>
		case DTYPE_String:
			switch (DescriptorNumber)
     1ce:	99 27       	eor	r25, r25
     1d0:	81 30       	cpi	r24, 0x01	; 1
     1d2:	91 05       	cpc	r25, r1
     1d4:	51 f0       	breq	.+20     	; 0x1ea <CALLBACK_USB_GetDescriptor+0x58>
     1d6:	18 f0       	brcs	.+6      	; 0x1de <CALLBACK_USB_GetDescriptor+0x4c>
     1d8:	02 97       	sbiw	r24, 0x02	; 2
     1da:	69 f0       	breq	.+26     	; 0x1f6 <CALLBACK_USB_GetDescriptor+0x64>
     1dc:	21 c0       	rjmp	.+66     	; 0x220 <CALLBACK_USB_GetDescriptor+0x8e>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     1de:	ea ed       	ldi	r30, 0xDA	; 218
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	84 91       	lpm	r24, Z
     1e4:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     1e6:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     1e8:	1f c0       	rjmp	.+62     	; 0x228 <CALLBACK_USB_GetDescriptor+0x96>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     1ea:	e0 ec       	ldi	r30, 0xC0	; 192
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	84 91       	lpm	r24, Z
     1f0:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     1f2:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     1f4:	19 c0       	rjmp	.+50     	; 0x228 <CALLBACK_USB_GetDescriptor+0x96>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     1f6:	e8 e9       	ldi	r30, 0x98	; 152
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	84 91       	lpm	r24, Z
     1fc:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     1fe:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     200:	13 c0       	rjmp	.+38     	; 0x228 <CALLBACK_USB_GetDescriptor+0x96>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     202:	89 e0       	ldi	r24, 0x09	; 9
     204:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
     206:	20 ef       	ldi	r18, 0xF0	; 240
     208:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     20a:	0e c0       	rjmp	.+28     	; 0x228 <CALLBACK_USB_GetDescriptor+0x96>
		case HID_DTYPE_Report:
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
     20c:	80 e4       	ldi	r24, 0x40	; 64
     20e:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &KeyboardReport;
     210:	22 e1       	ldi	r18, 0x12	; 18
     212:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(KeyboardReport);
			break;
     214:	09 c0       	rjmp	.+18     	; 0x228 <CALLBACK_USB_GetDescriptor+0x96>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     21a:	20 e0       	ldi	r18, 0x00	; 0
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	04 c0       	rjmp	.+8      	; 0x228 <CALLBACK_USB_GetDescriptor+0x96>
	uint16_t    Size    = NO_DESCRIPTOR;
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     224:	20 e0       	ldi	r18, 0x00	; 0
     226:	30 e0       	ldi	r19, 0x00	; 0
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
			break;
	}

	*DescriptorAddress = Address;
     228:	fa 01       	movw	r30, r20
     22a:	31 83       	std	Z+1, r19	; 0x01
     22c:	20 83       	st	Z, r18
	return Size;
}
     22e:	08 95       	ret

00000230 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     230:	3f 92       	push	r3
     232:	4f 92       	push	r4
     234:	5f 92       	push	r5
     236:	6f 92       	push	r6
     238:	7f 92       	push	r7
     23a:	8f 92       	push	r8
     23c:	9f 92       	push	r9
     23e:	af 92       	push	r10
     240:	bf 92       	push	r11
     242:	cf 92       	push	r12
     244:	df 92       	push	r13
     246:	ef 92       	push	r14
     248:	ff 92       	push	r15
     24a:	0f 93       	push	r16
     24c:	1f 93       	push	r17
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	00 d0       	rcall	.+0      	; 0x254 <HID_Device_ProcessControlRequest+0x24>
     254:	1f 92       	push	r1
     256:	cd b7       	in	r28, 0x3d	; 61
     258:	de b7       	in	r29, 0x3e	; 62
     25a:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     25c:	ed b6       	in	r14, 0x3d	; 61
     25e:	fe b6       	in	r15, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     260:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     264:	83 ff       	sbrs	r24, 3
     266:	14 c1       	rjmp	.+552    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     268:	f6 01       	movw	r30, r12
     26a:	80 81       	ld	r24, Z
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <USB_ControlRequest+0x4>
     272:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <USB_ControlRequest+0x5>
     276:	28 17       	cp	r18, r24
     278:	39 07       	cpc	r19, r25
     27a:	09 f0       	breq	.+2      	; 0x27e <HID_Device_ProcessControlRequest+0x4e>
     27c:	09 c1       	rjmp	.+530    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
	  return;

	switch (USB_ControlRequest.bRequest)
     27e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <USB_ControlRequest+0x1>
     282:	83 30       	cpi	r24, 0x03	; 3
     284:	09 f4       	brne	.+2      	; 0x288 <HID_Device_ProcessControlRequest+0x58>
     286:	a1 c0       	rjmp	.+322    	; 0x3ca <HID_Device_ProcessControlRequest+0x19a>
     288:	30 f4       	brcc	.+12     	; 0x296 <HID_Device_ProcessControlRequest+0x66>
     28a:	81 30       	cpi	r24, 0x01	; 1
     28c:	71 f0       	breq	.+28     	; 0x2aa <HID_Device_ProcessControlRequest+0x7a>
     28e:	82 30       	cpi	r24, 0x02	; 2
     290:	09 f4       	brne	.+2      	; 0x294 <HID_Device_ProcessControlRequest+0x64>
     292:	e3 c0       	rjmp	.+454    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     294:	fd c0       	rjmp	.+506    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     296:	8a 30       	cpi	r24, 0x0A	; 10
     298:	09 f4       	brne	.+2      	; 0x29c <HID_Device_ProcessControlRequest+0x6c>
     29a:	c3 c0       	rjmp	.+390    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     29c:	8b 30       	cpi	r24, 0x0B	; 11
     29e:	09 f4       	brne	.+2      	; 0x2a2 <HID_Device_ProcessControlRequest+0x72>
     2a0:	ac c0       	rjmp	.+344    	; 0x3fa <HID_Device_ProcessControlRequest+0x1ca>
     2a2:	89 30       	cpi	r24, 0x09	; 9
     2a4:	09 f0       	breq	.+2      	; 0x2a8 <HID_Device_ProcessControlRequest+0x78>
     2a6:	f4 c0       	rjmp	.+488    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     2a8:	52 c0       	rjmp	.+164    	; 0x34e <HID_Device_ProcessControlRequest+0x11e>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     2aa:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest>
     2ae:	81 3a       	cpi	r24, 0xA1	; 161
     2b0:	09 f0       	breq	.+2      	; 0x2b4 <HID_Device_ProcessControlRequest+0x84>
     2b2:	ee c0       	rjmp	.+476    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
			{
     2b4:	ad b6       	in	r10, 0x3d	; 61
     2b6:	be b6       	in	r11, 0x3e	; 62
				uint16_t ReportSize = 0;
     2b8:	1a 82       	std	Y+2, r1	; 0x02
     2ba:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     2bc:	ed e1       	ldi	r30, 0x1D	; 29
     2be:	f1 e0       	ldi	r31, 0x01	; 1
     2c0:	82 81       	ldd	r24, Z+2	; 0x02
     2c2:	13 81       	ldd	r17, Z+3	; 0x03
     2c4:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     2c6:	f6 01       	movw	r30, r12
     2c8:	80 85       	ldd	r24, Z+8	; 0x08
     2ca:	48 2f       	mov	r20, r24
     2cc:	50 e0       	ldi	r21, 0x00	; 0
     2ce:	8d b7       	in	r24, 0x3d	; 61
     2d0:	9e b7       	in	r25, 0x3e	; 62
     2d2:	84 1b       	sub	r24, r20
     2d4:	95 0b       	sbc	r25, r21
     2d6:	0f b6       	in	r0, 0x3f	; 63
     2d8:	f8 94       	cli
     2da:	9e bf       	out	0x3e, r25	; 62
     2dc:	0f be       	out	0x3f, r0	; 63
     2de:	8d bf       	out	0x3d, r24	; 61
     2e0:	ed b7       	in	r30, 0x3d	; 61
     2e2:	fe b7       	in	r31, 0x3e	; 62
     2e4:	31 96       	adiw	r30, 0x01	; 1
     2e6:	4f 01       	movw	r8, r30

				memset(ReportData, 0, sizeof(ReportData));
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	70 e0       	ldi	r23, 0x00	; 0
     2ec:	cf 01       	movw	r24, r30
     2ee:	0e 94 86 09 	call	0x130c	; 0x130c <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     2f2:	4f ef       	ldi	r20, 0xFF	; 255
     2f4:	41 0f       	add	r20, r17
     2f6:	8e 01       	movw	r16, r28
     2f8:	0f 5f       	subi	r16, 0xFF	; 255
     2fa:	1f 4f       	sbci	r17, 0xFF	; 255
     2fc:	94 01       	movw	r18, r8
     2fe:	be 01       	movw	r22, r28
     300:	6d 5f       	subi	r22, 0xFD	; 253
     302:	7f 4f       	sbci	r23, 0xFF	; 255
     304:	c6 01       	movw	r24, r12
     306:	ab d7       	rcall	.+3926   	; 0x125e <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     308:	f6 01       	movw	r30, r12
     30a:	86 81       	ldd	r24, Z+6	; 0x06
     30c:	97 81       	ldd	r25, Z+7	; 0x07
     30e:	00 97       	sbiw	r24, 0x00	; 0
     310:	21 f0       	breq	.+8      	; 0x31a <HID_Device_ProcessControlRequest+0xea>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     312:	40 85       	ldd	r20, Z+8	; 0x08
     314:	50 e0       	ldi	r21, 0x00	; 0
     316:	b4 01       	movw	r22, r8
     318:	f0 d7       	rcall	.+4064   	; 0x12fa <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     31a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     31e:	e8 ee       	ldi	r30, 0xE8	; 232
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	80 81       	ld	r24, Z
     324:	87 7f       	andi	r24, 0xF7	; 247
     326:	80 83       	st	Z, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
     328:	8b 81       	ldd	r24, Y+3	; 0x03
     32a:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     32c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     330:	69 81       	ldd	r22, Y+1	; 0x01
     332:	7a 81       	ldd	r23, Y+2	; 0x02
     334:	c4 01       	movw	r24, r8
     336:	f4 d1       	rcall	.+1000   	; 0x720 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     338:	e8 ee       	ldi	r30, 0xE8	; 232
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	80 81       	ld	r24, Z
     33e:	8b 77       	andi	r24, 0x7B	; 123
     340:	80 83       	st	Z, r24
     342:	0f b6       	in	r0, 0x3f	; 63
     344:	f8 94       	cli
     346:	be be       	out	0x3e, r11	; 62
     348:	0f be       	out	0x3f, r0	; 63
     34a:	ad be       	out	0x3d, r10	; 61
     34c:	a1 c0       	rjmp	.+322    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     34e:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest>
     352:	81 32       	cpi	r24, 0x21	; 33
     354:	09 f0       	breq	.+2      	; 0x358 <HID_Device_ProcessControlRequest+0x128>
     356:	9c c0       	rjmp	.+312    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
			{
     358:	6d b6       	in	r6, 0x3d	; 61
     35a:	7e b6       	in	r7, 0x3e	; 62
				uint16_t ReportSize = USB_ControlRequest.wLength;
     35c:	ed e1       	ldi	r30, 0x1D	; 29
     35e:	f1 e0       	ldi	r31, 0x01	; 1
     360:	06 81       	ldd	r16, Z+6	; 0x06
     362:	17 81       	ldd	r17, Z+7	; 0x07
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     364:	52 80       	ldd	r5, Z+2	; 0x02
     366:	43 80       	ldd	r4, Z+3	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     368:	8d b7       	in	r24, 0x3d	; 61
     36a:	9e b7       	in	r25, 0x3e	; 62
     36c:	80 1b       	sub	r24, r16
     36e:	91 0b       	sbc	r25, r17
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	f8 94       	cli
     374:	9e bf       	out	0x3e, r25	; 62
     376:	0f be       	out	0x3f, r0	; 63
     378:	8d bf       	out	0x3d, r24	; 61
     37a:	ed b7       	in	r30, 0x3d	; 61
     37c:	fe b7       	in	r31, 0x3e	; 62
     37e:	31 96       	adiw	r30, 0x01	; 1
     380:	4f 01       	movw	r8, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     382:	0f 2e       	mov	r0, r31
     384:	f8 ee       	ldi	r31, 0xE8	; 232
     386:	af 2e       	mov	r10, r31
     388:	b1 2c       	mov	r11, r1
     38a:	f0 2d       	mov	r31, r0
     38c:	f5 01       	movw	r30, r10
     38e:	80 81       	ld	r24, Z
     390:	87 7f       	andi	r24, 0xF7	; 247
     392:	80 83       	st	Z, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     394:	b8 01       	movw	r22, r16
     396:	c4 01       	movw	r24, r8
     398:	42 d2       	rcall	.+1156   	; 0x81e <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     39a:	f5 01       	movw	r30, r10
     39c:	80 81       	ld	r24, Z
     39e:	8e 77       	andi	r24, 0x7E	; 126
     3a0:	80 83       	st	Z, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     3a2:	21 e0       	ldi	r18, 0x01	; 1
     3a4:	51 10       	cpse	r5, r1
     3a6:	01 c0       	rjmp	.+2      	; 0x3aa <HID_Device_ProcessControlRequest+0x17a>
     3a8:	20 e0       	ldi	r18, 0x00	; 0
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	02 1b       	sub	r16, r18
     3ae:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
     3b0:	28 0d       	add	r18, r8
     3b2:	39 1d       	adc	r19, r9

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     3b4:	4f ef       	ldi	r20, 0xFF	; 255
     3b6:	44 0d       	add	r20, r4
     3b8:	65 2d       	mov	r22, r5
     3ba:	c6 01       	movw	r24, r12
     3bc:	7c d7       	rcall	.+3832   	; 0x12b6 <CALLBACK_HID_Device_ProcessHIDReport>
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	f8 94       	cli
     3c2:	7e be       	out	0x3e, r7	; 62
     3c4:	0f be       	out	0x3f, r0	; 63
     3c6:	6d be       	out	0x3d, r6	; 61
     3c8:	63 c0       	rjmp	.+198    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     3ca:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest>
     3ce:	81 3a       	cpi	r24, 0xA1	; 161
     3d0:	09 f0       	breq	.+2      	; 0x3d4 <HID_Device_ProcessControlRequest+0x1a4>
     3d2:	5e c0       	rjmp	.+188    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     3d4:	e8 ee       	ldi	r30, 0xE8	; 232
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
     3da:	87 7f       	andi	r24, 0xF7	; 247
     3dc:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     3de:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     3e0:	80 ff       	sbrs	r24, 0
     3e2:	fd cf       	rjmp	.-6      	; 0x3de <HID_Device_ProcessControlRequest+0x1ae>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
     3e4:	f6 01       	movw	r30, r12
     3e6:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     3e8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     3ec:	e8 ee       	ldi	r30, 0xE8	; 232
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	80 81       	ld	r24, Z
     3f2:	8e 77       	andi	r24, 0x7E	; 126
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     3f4:	80 83       	st	Z, r24
     3f6:	b1 d3       	rcall	.+1890   	; 0xb5a <Endpoint_ClearStatusStage>
     3f8:	4b c0       	rjmp	.+150    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     3fa:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest>
     3fe:	81 32       	cpi	r24, 0x21	; 33
     400:	09 f0       	breq	.+2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     402:	46 c0       	rjmp	.+140    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     404:	e8 ee       	ldi	r30, 0xE8	; 232
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	80 81       	ld	r24, Z
     40a:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     40c:	80 83       	st	Z, r24
     40e:	a5 d3       	rcall	.+1866   	; 0xb5a <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
     410:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <USB_ControlRequest+0x2>
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	91 11       	cpse	r25, r1
     418:	01 c0       	rjmp	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	f6 01       	movw	r30, r12
     41e:	81 87       	std	Z+9, r24	; 0x09
     420:	37 c0       	rjmp	.+110    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     422:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest>
     426:	81 32       	cpi	r24, 0x21	; 33
     428:	99 f5       	brne	.+102    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     42a:	e8 ee       	ldi	r30, 0xE8	; 232
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	80 81       	ld	r24, Z
     430:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     432:	80 83       	st	Z, r24
     434:	92 d3       	rcall	.+1828   	; 0xb5a <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
     436:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <USB_ControlRequest+0x2>
     43a:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <USB_ControlRequest+0x3>
     43e:	88 27       	eor	r24, r24
     440:	00 24       	eor	r0, r0
     442:	88 0f       	add	r24, r24
     444:	99 1f       	adc	r25, r25
     446:	00 1c       	adc	r0, r0
     448:	88 0f       	add	r24, r24
     44a:	99 1f       	adc	r25, r25
     44c:	00 1c       	adc	r0, r0
     44e:	89 2f       	mov	r24, r25
     450:	90 2d       	mov	r25, r0
     452:	f6 01       	movw	r30, r12
     454:	95 87       	std	Z+13, r25	; 0x0d
     456:	84 87       	std	Z+12, r24	; 0x0c
     458:	1b c0       	rjmp	.+54     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     45a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest>
     45e:	81 3a       	cpi	r24, 0xA1	; 161
     460:	b9 f4       	brne	.+46     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     462:	e8 ee       	ldi	r30, 0xE8	; 232
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	80 81       	ld	r24, Z
     468:	87 7f       	andi	r24, 0xF7	; 247
     46a:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     46c:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     46e:	80 ff       	sbrs	r24, 0
     470:	fd cf       	rjmp	.-6      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
     472:	f6 01       	movw	r30, r12
     474:	84 85       	ldd	r24, Z+12	; 0x0c
     476:	95 85       	ldd	r25, Z+13	; 0x0d
     478:	96 95       	lsr	r25
     47a:	87 95       	ror	r24
     47c:	96 95       	lsr	r25
     47e:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     480:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     484:	e8 ee       	ldi	r30, 0xE8	; 232
     486:	f0 e0       	ldi	r31, 0x00	; 0
     488:	80 81       	ld	r24, Z
     48a:	8e 77       	andi	r24, 0x7E	; 126
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     48c:	80 83       	st	Z, r24
     48e:	65 d3       	rcall	.+1738   	; 0xb5a <Endpoint_ClearStatusStage>
			}

			break;
	}
}
     490:	0f b6       	in	r0, 0x3f	; 63
     492:	f8 94       	cli
     494:	fe be       	out	0x3e, r15	; 62
     496:	0f be       	out	0x3f, r0	; 63
     498:	ed be       	out	0x3d, r14	; 61
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	1f 91       	pop	r17
     4a6:	0f 91       	pop	r16
     4a8:	ff 90       	pop	r15
     4aa:	ef 90       	pop	r14
     4ac:	df 90       	pop	r13
     4ae:	cf 90       	pop	r12
     4b0:	bf 90       	pop	r11
     4b2:	af 90       	pop	r10
     4b4:	9f 90       	pop	r9
     4b6:	8f 90       	pop	r8
     4b8:	7f 90       	pop	r7
     4ba:	6f 90       	pop	r6
     4bc:	5f 90       	pop	r5
     4be:	4f 90       	pop	r4
     4c0:	3f 90       	pop	r3
     4c2:	08 95       	ret

000004c4 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
     4c4:	fc 01       	movw	r30, r24
     4c6:	39 96       	adiw	r30, 0x09	; 9
     4c8:	27 e0       	ldi	r18, 0x07	; 7
     4ca:	df 01       	movw	r26, r30
     4cc:	1d 92       	st	X+, r1
     4ce:	2a 95       	dec	r18
     4d0:	e9 f7       	brne	.-6      	; 0x4cc <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     4d2:	21 e0       	ldi	r18, 0x01	; 1
     4d4:	fc 01       	movw	r30, r24
     4d6:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
     4d8:	24 ef       	ldi	r18, 0xF4	; 244
     4da:	31 e0       	ldi	r19, 0x01	; 1
     4dc:	35 87       	std	Z+13, r19	; 0x0d
     4de:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
     4e0:	23 e0       	ldi	r18, 0x03	; 3
     4e2:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
     4e4:	61 e0       	ldi	r22, 0x01	; 1
     4e6:	01 96       	adiw	r24, 0x01	; 1
     4e8:	e9 c2       	rjmp	.+1490   	; 0xabc <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
     4ea:	08 95       	ret

000004ec <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     4ec:	5f 92       	push	r5
     4ee:	6f 92       	push	r6
     4f0:	7f 92       	push	r7
     4f2:	8f 92       	push	r8
     4f4:	9f 92       	push	r9
     4f6:	af 92       	push	r10
     4f8:	bf 92       	push	r11
     4fa:	cf 92       	push	r12
     4fc:	df 92       	push	r13
     4fe:	ef 92       	push	r14
     500:	ff 92       	push	r15
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	00 d0       	rcall	.+0      	; 0x50c <HID_Device_USBTask+0x20>
     50c:	1f 92       	push	r1
     50e:	cd b7       	in	r28, 0x3d	; 61
     510:	de b7       	in	r29, 0x3e	; 62
     512:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
     514:	ad b6       	in	r10, 0x3d	; 61
     516:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     518:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_DeviceState>
     51c:	84 30       	cpi	r24, 0x04	; 4
     51e:	09 f0       	breq	.+2      	; 0x522 <HID_Device_USBTask+0x36>
     520:	8a c0       	rjmp	.+276    	; 0x636 <HID_Device_USBTask+0x14a>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     522:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     526:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
     52a:	f7 01       	movw	r30, r14
     52c:	22 85       	ldd	r18, Z+10	; 0x0a
     52e:	33 85       	ldd	r19, Z+11	; 0x0b
     530:	28 17       	cp	r18, r24
     532:	39 07       	cpc	r19, r25
     534:	09 f4       	brne	.+2      	; 0x538 <HID_Device_USBTask+0x4c>
     536:	7f c0       	rjmp	.+254    	; 0x636 <HID_Device_USBTask+0x14a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     538:	81 81       	ldd	r24, Z+1	; 0x01
     53a:	8f 70       	andi	r24, 0x0F	; 15
     53c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     540:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
     544:	85 ff       	sbrs	r24, 5
     546:	77 c0       	rjmp	.+238    	; 0x636 <HID_Device_USBTask+0x14a>
	{
     548:	8d b6       	in	r8, 0x3d	; 61
     54a:	9e b6       	in	r9, 0x3e	; 62
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     54c:	40 85       	ldd	r20, Z+8	; 0x08
     54e:	50 e0       	ldi	r21, 0x00	; 0
     550:	8d b7       	in	r24, 0x3d	; 61
     552:	9e b7       	in	r25, 0x3e	; 62
     554:	84 1b       	sub	r24, r20
     556:	95 0b       	sbc	r25, r21
     558:	0f b6       	in	r0, 0x3f	; 63
     55a:	f8 94       	cli
     55c:	9e bf       	out	0x3e, r25	; 62
     55e:	0f be       	out	0x3f, r0	; 63
     560:	8d bf       	out	0x3d, r24	; 61
     562:	ed b7       	in	r30, 0x3d	; 61
     564:	fe b7       	in	r31, 0x3e	; 62
     566:	31 96       	adiw	r30, 0x01	; 1
     568:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
     56a:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
     56c:	1a 82       	std	Y+2, r1	; 0x02
     56e:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
     570:	60 e0       	ldi	r22, 0x00	; 0
     572:	70 e0       	ldi	r23, 0x00	; 0
     574:	cf 01       	movw	r24, r30
     576:	ca d6       	rcall	.+3476   	; 0x130c <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
     578:	8e 01       	movw	r16, r28
     57a:	0f 5f       	subi	r16, 0xFF	; 255
     57c:	1f 4f       	sbci	r17, 0xFF	; 255
     57e:	96 01       	movw	r18, r12
     580:	40 e0       	ldi	r20, 0x00	; 0
     582:	be 01       	movw	r22, r28
     584:	6d 5f       	subi	r22, 0xFD	; 253
     586:	7f 4f       	sbci	r23, 0xFF	; 255
     588:	c7 01       	movw	r24, r14
     58a:	69 d6       	rcall	.+3282   	; 0x125e <CALLBACK_HID_Device_CreateHIDReport>
     58c:	58 2e       	mov	r5, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
     58e:	f7 01       	movw	r30, r14
     590:	84 85       	ldd	r24, Z+12	; 0x0c
     592:	95 85       	ldd	r25, Z+13	; 0x0d
     594:	89 2b       	or	r24, r25
     596:	41 f0       	breq	.+16     	; 0x5a8 <HID_Device_USBTask+0xbc>
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	26 85       	ldd	r18, Z+14	; 0x0e
     59c:	37 85       	ldd	r19, Z+15	; 0x0f
     59e:	23 2b       	or	r18, r19
     5a0:	09 f0       	breq	.+2      	; 0x5a4 <HID_Device_USBTask+0xb8>
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	78 2e       	mov	r7, r24
     5a6:	01 c0       	rjmp	.+2      	; 0x5aa <HID_Device_USBTask+0xbe>
     5a8:	71 2c       	mov	r7, r1

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     5aa:	f7 01       	movw	r30, r14
     5ac:	06 81       	ldd	r16, Z+6	; 0x06
     5ae:	17 81       	ldd	r17, Z+7	; 0x07
     5b0:	01 15       	cp	r16, r1
     5b2:	11 05       	cpc	r17, r1
     5b4:	89 f0       	breq	.+34     	; 0x5d8 <HID_Device_USBTask+0xec>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
     5b6:	49 81       	ldd	r20, Y+1	; 0x01
     5b8:	5a 81       	ldd	r21, Y+2	; 0x02
     5ba:	b8 01       	movw	r22, r16
     5bc:	c6 01       	movw	r24, r12
     5be:	90 d6       	rcall	.+3360   	; 0x12e0 <memcmp>
     5c0:	66 24       	eor	r6, r6
     5c2:	63 94       	inc	r6
     5c4:	89 2b       	or	r24, r25
     5c6:	09 f4       	brne	.+2      	; 0x5ca <HID_Device_USBTask+0xde>
     5c8:	61 2c       	mov	r6, r1
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
     5ca:	f7 01       	movw	r30, r14
     5cc:	40 85       	ldd	r20, Z+8	; 0x08
     5ce:	50 e0       	ldi	r21, 0x00	; 0
     5d0:	b6 01       	movw	r22, r12
     5d2:	c8 01       	movw	r24, r16
     5d4:	92 d6       	rcall	.+3364   	; 0x12fa <memcpy>
     5d6:	01 c0       	rjmp	.+2      	; 0x5da <HID_Device_USBTask+0xee>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
     5d8:	61 2c       	mov	r6, r1
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
     5da:	89 81       	ldd	r24, Y+1	; 0x01
     5dc:	9a 81       	ldd	r25, Y+2	; 0x02
     5de:	89 2b       	or	r24, r25
     5e0:	f1 f0       	breq	.+60     	; 0x61e <HID_Device_USBTask+0x132>
     5e2:	51 10       	cpse	r5, r1
     5e4:	04 c0       	rjmp	.+8      	; 0x5ee <HID_Device_USBTask+0x102>
     5e6:	61 10       	cpse	r6, r1
     5e8:	02 c0       	rjmp	.+4      	; 0x5ee <HID_Device_USBTask+0x102>
     5ea:	70 fe       	sbrs	r7, 0
     5ec:	18 c0       	rjmp	.+48     	; 0x61e <HID_Device_USBTask+0x132>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
     5ee:	f7 01       	movw	r30, r14
     5f0:	84 85       	ldd	r24, Z+12	; 0x0c
     5f2:	95 85       	ldd	r25, Z+13	; 0x0d
     5f4:	97 87       	std	Z+15, r25	; 0x0f
     5f6:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     5f8:	81 81       	ldd	r24, Z+1	; 0x01
     5fa:	8f 70       	andi	r24, 0x0F	; 15
     5fc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
     600:	8b 81       	ldd	r24, Y+3	; 0x03
     602:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     604:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
     608:	69 81       	ldd	r22, Y+1	; 0x01
     60a:	7a 81       	ldd	r23, Y+2	; 0x02
     60c:	40 e0       	ldi	r20, 0x00	; 0
     60e:	50 e0       	ldi	r21, 0x00	; 0
     610:	c6 01       	movw	r24, r12
     612:	29 d0       	rcall	.+82     	; 0x666 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     614:	e8 ee       	ldi	r30, 0xE8	; 232
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	80 81       	ld	r24, Z
     61a:	8e 77       	andi	r24, 0x7E	; 126
     61c:	80 83       	st	Z, r24
     61e:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     622:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
     626:	f7 01       	movw	r30, r14
     628:	93 87       	std	Z+11, r25	; 0x0b
     62a:	82 87       	std	Z+10, r24	; 0x0a
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	f8 94       	cli
     630:	9e be       	out	0x3e, r9	; 62
     632:	0f be       	out	0x3f, r0	; 63
     634:	8d be       	out	0x3d, r8	; 61
	}
}
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	f8 94       	cli
     63a:	be be       	out	0x3e, r11	; 62
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	ad be       	out	0x3d, r10	; 61
     640:	0f 90       	pop	r0
     642:	0f 90       	pop	r0
     644:	0f 90       	pop	r0
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	1f 91       	pop	r17
     64c:	0f 91       	pop	r16
     64e:	ff 90       	pop	r15
     650:	ef 90       	pop	r14
     652:	df 90       	pop	r13
     654:	cf 90       	pop	r12
     656:	bf 90       	pop	r11
     658:	af 90       	pop	r10
     65a:	9f 90       	pop	r9
     65c:	8f 90       	pop	r8
     65e:	7f 90       	pop	r7
     660:	6f 90       	pop	r6
     662:	5f 90       	pop	r5
     664:	08 95       	ret

00000666 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     666:	8f 92       	push	r8
     668:	9f 92       	push	r9
     66a:	af 92       	push	r10
     66c:	bf 92       	push	r11
     66e:	cf 92       	push	r12
     670:	df 92       	push	r13
     672:	ef 92       	push	r14
     674:	ff 92       	push	r15
     676:	0f 93       	push	r16
     678:	1f 93       	push	r17
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
     67e:	8c 01       	movw	r16, r24
     680:	eb 01       	movw	r28, r22
     682:	5a 01       	movw	r10, r20
     684:	8e d2       	rcall	.+1308   	; 0xba2 <Endpoint_WaitUntilReady>
     686:	81 11       	cpse	r24, r1
     688:	3e c0       	rjmp	.+124    	; 0x706 <Endpoint_Write_Stream_LE+0xa0>
     68a:	a1 14       	cp	r10, r1
     68c:	b1 04       	cpc	r11, r1
     68e:	39 f0       	breq	.+14     	; 0x69e <Endpoint_Write_Stream_LE+0x38>
     690:	f5 01       	movw	r30, r10
     692:	80 81       	ld	r24, Z
     694:	91 81       	ldd	r25, Z+1	; 0x01
     696:	c8 1b       	sub	r28, r24
     698:	d9 0b       	sbc	r29, r25
     69a:	08 0f       	add	r16, r24
     69c:	19 1f       	adc	r17, r25
     69e:	20 97       	sbiw	r28, 0x00	; 0
     6a0:	89 f1       	breq	.+98     	; 0x704 <Endpoint_Write_Stream_LE+0x9e>
     6a2:	e1 2c       	mov	r14, r1
     6a4:	f1 2c       	mov	r15, r1
     6a6:	0f 2e       	mov	r0, r31
     6a8:	f8 ee       	ldi	r31, 0xE8	; 232
     6aa:	8f 2e       	mov	r8, r31
     6ac:	91 2c       	mov	r9, r1
     6ae:	f0 2d       	mov	r31, r0
     6b0:	0f 2e       	mov	r0, r31
     6b2:	f1 ef       	ldi	r31, 0xF1	; 241
     6b4:	cf 2e       	mov	r12, r31
     6b6:	d1 2c       	mov	r13, r1
     6b8:	f0 2d       	mov	r31, r0
     6ba:	f4 01       	movw	r30, r8
     6bc:	80 81       	ld	r24, Z
     6be:	85 fd       	sbrc	r24, 5
     6c0:	14 c0       	rjmp	.+40     	; 0x6ea <Endpoint_Write_Stream_LE+0x84>
     6c2:	80 81       	ld	r24, Z
     6c4:	8e 77       	andi	r24, 0x7E	; 126
     6c6:	80 83       	st	Z, r24
     6c8:	4b d5       	rcall	.+2710   	; 0x1160 <USB_USBTask>
     6ca:	a1 14       	cp	r10, r1
     6cc:	b1 04       	cpc	r11, r1
     6ce:	49 f0       	breq	.+18     	; 0x6e2 <Endpoint_Write_Stream_LE+0x7c>
     6d0:	f5 01       	movw	r30, r10
     6d2:	80 81       	ld	r24, Z
     6d4:	91 81       	ldd	r25, Z+1	; 0x01
     6d6:	e8 0e       	add	r14, r24
     6d8:	f9 1e       	adc	r15, r25
     6da:	f1 82       	std	Z+1, r15	; 0x01
     6dc:	e0 82       	st	Z, r14
     6de:	85 e0       	ldi	r24, 0x05	; 5
     6e0:	12 c0       	rjmp	.+36     	; 0x706 <Endpoint_Write_Stream_LE+0xa0>
     6e2:	5f d2       	rcall	.+1214   	; 0xba2 <Endpoint_WaitUntilReady>
     6e4:	88 23       	and	r24, r24
     6e6:	51 f0       	breq	.+20     	; 0x6fc <Endpoint_Write_Stream_LE+0x96>
     6e8:	0e c0       	rjmp	.+28     	; 0x706 <Endpoint_Write_Stream_LE+0xa0>
     6ea:	f8 01       	movw	r30, r16
     6ec:	81 91       	ld	r24, Z+
     6ee:	8f 01       	movw	r16, r30
     6f0:	f6 01       	movw	r30, r12
     6f2:	80 83       	st	Z, r24
     6f4:	21 97       	sbiw	r28, 0x01	; 1
     6f6:	ff ef       	ldi	r31, 0xFF	; 255
     6f8:	ef 1a       	sub	r14, r31
     6fa:	ff 0a       	sbc	r15, r31
     6fc:	20 97       	sbiw	r28, 0x00	; 0
     6fe:	e9 f6       	brne	.-70     	; 0x6ba <Endpoint_Write_Stream_LE+0x54>
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	01 c0       	rjmp	.+2      	; 0x706 <Endpoint_Write_Stream_LE+0xa0>
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	1f 91       	pop	r17
     70c:	0f 91       	pop	r16
     70e:	ff 90       	pop	r15
     710:	ef 90       	pop	r14
     712:	df 90       	pop	r13
     714:	cf 90       	pop	r12
     716:	bf 90       	pop	r11
     718:	af 90       	pop	r10
     71a:	9f 90       	pop	r9
     71c:	8f 90       	pop	r8
     71e:	08 95       	ret

00000720 <Endpoint_Write_Control_Stream_LE>:
     720:	ef 92       	push	r14
     722:	ff 92       	push	r15
     724:	0f 93       	push	r16
     726:	1f 93       	push	r17
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <USB_ControlRequest+0x6>
     730:	30 91 24 01 	lds	r19, 0x0124	; 0x800124 <USB_ControlRequest+0x7>
     734:	26 17       	cp	r18, r22
     736:	37 07       	cpc	r19, r23
     738:	58 f0       	brcs	.+22     	; 0x750 <Endpoint_Write_Control_Stream_LE+0x30>
     73a:	61 15       	cp	r22, r1
     73c:	71 05       	cpc	r23, r1
     73e:	39 f4       	brne	.+14     	; 0x74e <Endpoint_Write_Control_Stream_LE+0x2e>
     740:	e8 ee       	ldi	r30, 0xE8	; 232
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	20 81       	ld	r18, Z
     746:	2e 77       	andi	r18, 0x7E	; 126
     748:	20 83       	st	Z, r18
     74a:	9b 01       	movw	r18, r22
     74c:	01 c0       	rjmp	.+2      	; 0x750 <Endpoint_Write_Control_Stream_LE+0x30>
     74e:	9b 01       	movw	r18, r22
     750:	a8 2f       	mov	r26, r24
     752:	b9 2f       	mov	r27, r25
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	e8 ee       	ldi	r30, 0xE8	; 232
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	62 ef       	ldi	r22, 0xF2	; 242
     75c:	70 e0       	ldi	r23, 0x00	; 0
     75e:	0f 2e       	mov	r0, r31
     760:	f1 ef       	ldi	r31, 0xF1	; 241
     762:	ef 2e       	mov	r14, r31
     764:	f1 2c       	mov	r15, r1
     766:	f0 2d       	mov	r31, r0
     768:	11 e0       	ldi	r17, 0x01	; 1
     76a:	00 e0       	ldi	r16, 0x00	; 0
     76c:	2f c0       	rjmp	.+94     	; 0x7cc <Endpoint_Write_Control_Stream_LE+0xac>
     76e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_DeviceState>
     772:	88 23       	and	r24, r24
     774:	09 f4       	brne	.+2      	; 0x778 <Endpoint_Write_Control_Stream_LE+0x58>
     776:	41 c0       	rjmp	.+130    	; 0x7fa <Endpoint_Write_Control_Stream_LE+0xda>
     778:	85 30       	cpi	r24, 0x05	; 5
     77a:	09 f4       	brne	.+2      	; 0x77e <Endpoint_Write_Control_Stream_LE+0x5e>
     77c:	40 c0       	rjmp	.+128    	; 0x7fe <Endpoint_Write_Control_Stream_LE+0xde>
     77e:	80 81       	ld	r24, Z
     780:	83 fd       	sbrc	r24, 3
     782:	3f c0       	rjmp	.+126    	; 0x802 <Endpoint_Write_Control_Stream_LE+0xe2>
     784:	80 81       	ld	r24, Z
     786:	82 fd       	sbrc	r24, 2
     788:	31 c0       	rjmp	.+98     	; 0x7ec <Endpoint_Write_Control_Stream_LE+0xcc>
     78a:	80 81       	ld	r24, Z
     78c:	80 ff       	sbrs	r24, 0
     78e:	1e c0       	rjmp	.+60     	; 0x7cc <Endpoint_Write_Control_Stream_LE+0xac>
     790:	eb 01       	movw	r28, r22
     792:	48 81       	ld	r20, Y
     794:	59 81       	ldd	r21, Y+1	; 0x01
     796:	21 15       	cp	r18, r1
     798:	31 05       	cpc	r19, r1
     79a:	81 f0       	breq	.+32     	; 0x7bc <Endpoint_Write_Control_Stream_LE+0x9c>
     79c:	48 30       	cpi	r20, 0x08	; 8
     79e:	51 05       	cpc	r21, r1
     7a0:	68 f4       	brcc	.+26     	; 0x7bc <Endpoint_Write_Control_Stream_LE+0x9c>
     7a2:	8d 91       	ld	r24, X+
     7a4:	e7 01       	movw	r28, r14
     7a6:	88 83       	st	Y, r24
     7a8:	21 50       	subi	r18, 0x01	; 1
     7aa:	31 09       	sbc	r19, r1
     7ac:	4f 5f       	subi	r20, 0xFF	; 255
     7ae:	5f 4f       	sbci	r21, 0xFF	; 255
     7b0:	21 15       	cp	r18, r1
     7b2:	31 05       	cpc	r19, r1
     7b4:	19 f0       	breq	.+6      	; 0x7bc <Endpoint_Write_Control_Stream_LE+0x9c>
     7b6:	48 30       	cpi	r20, 0x08	; 8
     7b8:	51 05       	cpc	r21, r1
     7ba:	99 f7       	brne	.-26     	; 0x7a2 <Endpoint_Write_Control_Stream_LE+0x82>
     7bc:	91 2f       	mov	r25, r17
     7be:	48 30       	cpi	r20, 0x08	; 8
     7c0:	51 05       	cpc	r21, r1
     7c2:	09 f0       	breq	.+2      	; 0x7c6 <Endpoint_Write_Control_Stream_LE+0xa6>
     7c4:	90 2f       	mov	r25, r16
     7c6:	80 81       	ld	r24, Z
     7c8:	8e 77       	andi	r24, 0x7E	; 126
     7ca:	80 83       	st	Z, r24
     7cc:	21 15       	cp	r18, r1
     7ce:	31 05       	cpc	r19, r1
     7d0:	71 f6       	brne	.-100    	; 0x76e <Endpoint_Write_Control_Stream_LE+0x4e>
     7d2:	91 11       	cpse	r25, r1
     7d4:	cc cf       	rjmp	.-104    	; 0x76e <Endpoint_Write_Control_Stream_LE+0x4e>
     7d6:	0a c0       	rjmp	.+20     	; 0x7ec <Endpoint_Write_Control_Stream_LE+0xcc>
     7d8:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_DeviceState>
     7dc:	88 23       	and	r24, r24
     7de:	99 f0       	breq	.+38     	; 0x806 <Endpoint_Write_Control_Stream_LE+0xe6>
     7e0:	85 30       	cpi	r24, 0x05	; 5
     7e2:	99 f0       	breq	.+38     	; 0x80a <Endpoint_Write_Control_Stream_LE+0xea>
     7e4:	80 81       	ld	r24, Z
     7e6:	83 ff       	sbrs	r24, 3
     7e8:	03 c0       	rjmp	.+6      	; 0x7f0 <Endpoint_Write_Control_Stream_LE+0xd0>
     7ea:	11 c0       	rjmp	.+34     	; 0x80e <Endpoint_Write_Control_Stream_LE+0xee>
     7ec:	e8 ee       	ldi	r30, 0xE8	; 232
     7ee:	f0 e0       	ldi	r31, 0x00	; 0
     7f0:	80 81       	ld	r24, Z
     7f2:	82 ff       	sbrs	r24, 2
     7f4:	f1 cf       	rjmp	.-30     	; 0x7d8 <Endpoint_Write_Control_Stream_LE+0xb8>
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	0b c0       	rjmp	.+22     	; 0x810 <Endpoint_Write_Control_Stream_LE+0xf0>
     7fa:	82 e0       	ldi	r24, 0x02	; 2
     7fc:	09 c0       	rjmp	.+18     	; 0x810 <Endpoint_Write_Control_Stream_LE+0xf0>
     7fe:	83 e0       	ldi	r24, 0x03	; 3
     800:	07 c0       	rjmp	.+14     	; 0x810 <Endpoint_Write_Control_Stream_LE+0xf0>
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	05 c0       	rjmp	.+10     	; 0x810 <Endpoint_Write_Control_Stream_LE+0xf0>
     806:	82 e0       	ldi	r24, 0x02	; 2
     808:	03 c0       	rjmp	.+6      	; 0x810 <Endpoint_Write_Control_Stream_LE+0xf0>
     80a:	83 e0       	ldi	r24, 0x03	; 3
     80c:	01 c0       	rjmp	.+2      	; 0x810 <Endpoint_Write_Control_Stream_LE+0xf0>
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	1f 91       	pop	r17
     816:	0f 91       	pop	r16
     818:	ff 90       	pop	r15
     81a:	ef 90       	pop	r14
     81c:	08 95       	ret

0000081e <Endpoint_Read_Control_Stream_LE>:
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	61 15       	cp	r22, r1
     824:	71 05       	cpc	r23, r1
     826:	39 f5       	brne	.+78     	; 0x876 <Endpoint_Read_Control_Stream_LE+0x58>
     828:	e8 ee       	ldi	r30, 0xE8	; 232
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	80 81       	ld	r24, Z
     82e:	8b 77       	andi	r24, 0x7B	; 123
     830:	80 83       	st	Z, r24
     832:	3d c0       	rjmp	.+122    	; 0x8ae <Endpoint_Read_Control_Stream_LE+0x90>
     834:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_DeviceState>
     838:	88 23       	and	r24, r24
     83a:	09 f4       	brne	.+2      	; 0x83e <Endpoint_Read_Control_Stream_LE+0x20>
     83c:	3f c0       	rjmp	.+126    	; 0x8bc <Endpoint_Read_Control_Stream_LE+0x9e>
     83e:	85 30       	cpi	r24, 0x05	; 5
     840:	09 f4       	brne	.+2      	; 0x844 <Endpoint_Read_Control_Stream_LE+0x26>
     842:	3e c0       	rjmp	.+124    	; 0x8c0 <Endpoint_Read_Control_Stream_LE+0xa2>
     844:	80 81       	ld	r24, Z
     846:	83 fd       	sbrc	r24, 3
     848:	3d c0       	rjmp	.+122    	; 0x8c4 <Endpoint_Read_Control_Stream_LE+0xa6>
     84a:	80 81       	ld	r24, Z
     84c:	82 ff       	sbrs	r24, 2
     84e:	f2 cf       	rjmp	.-28     	; 0x834 <Endpoint_Read_Control_Stream_LE+0x16>
     850:	45 c0       	rjmp	.+138    	; 0x8dc <Endpoint_Read_Control_Stream_LE+0xbe>
     852:	e9 01       	movw	r28, r18
     854:	88 81       	ld	r24, Y
     856:	8d 93       	st	X+, r24
     858:	61 50       	subi	r22, 0x01	; 1
     85a:	71 09       	sbc	r23, r1
     85c:	29 f0       	breq	.+10     	; 0x868 <Endpoint_Read_Control_Stream_LE+0x4a>
     85e:	ea 01       	movw	r28, r20
     860:	88 81       	ld	r24, Y
     862:	99 81       	ldd	r25, Y+1	; 0x01
     864:	89 2b       	or	r24, r25
     866:	a9 f7       	brne	.-22     	; 0x852 <Endpoint_Read_Control_Stream_LE+0x34>
     868:	80 81       	ld	r24, Z
     86a:	8b 77       	andi	r24, 0x7B	; 123
     86c:	80 83       	st	Z, r24
     86e:	61 15       	cp	r22, r1
     870:	71 05       	cpc	r23, r1
     872:	49 f4       	brne	.+18     	; 0x886 <Endpoint_Read_Control_Stream_LE+0x68>
     874:	1c c0       	rjmp	.+56     	; 0x8ae <Endpoint_Read_Control_Stream_LE+0x90>
     876:	a8 2f       	mov	r26, r24
     878:	b9 2f       	mov	r27, r25
     87a:	e8 ee       	ldi	r30, 0xE8	; 232
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	42 ef       	ldi	r20, 0xF2	; 242
     880:	50 e0       	ldi	r21, 0x00	; 0
     882:	21 ef       	ldi	r18, 0xF1	; 241
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_DeviceState>
     88a:	88 23       	and	r24, r24
     88c:	e9 f0       	breq	.+58     	; 0x8c8 <Endpoint_Read_Control_Stream_LE+0xaa>
     88e:	85 30       	cpi	r24, 0x05	; 5
     890:	e9 f0       	breq	.+58     	; 0x8cc <Endpoint_Read_Control_Stream_LE+0xae>
     892:	80 81       	ld	r24, Z
     894:	83 fd       	sbrc	r24, 3
     896:	1c c0       	rjmp	.+56     	; 0x8d0 <Endpoint_Read_Control_Stream_LE+0xb2>
     898:	80 81       	ld	r24, Z
     89a:	82 fd       	sbrc	r24, 2
     89c:	1f c0       	rjmp	.+62     	; 0x8dc <Endpoint_Read_Control_Stream_LE+0xbe>
     89e:	ca cf       	rjmp	.-108    	; 0x834 <Endpoint_Read_Control_Stream_LE+0x16>
     8a0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_DeviceState>
     8a4:	88 23       	and	r24, r24
     8a6:	b1 f0       	breq	.+44     	; 0x8d4 <Endpoint_Read_Control_Stream_LE+0xb6>
     8a8:	85 30       	cpi	r24, 0x05	; 5
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <Endpoint_Read_Control_Stream_LE+0x94>
     8ac:	15 c0       	rjmp	.+42     	; 0x8d8 <Endpoint_Read_Control_Stream_LE+0xba>
     8ae:	e8 ee       	ldi	r30, 0xE8	; 232
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	80 81       	ld	r24, Z
     8b4:	80 ff       	sbrs	r24, 0
     8b6:	f4 cf       	rjmp	.-24     	; 0x8a0 <Endpoint_Read_Control_Stream_LE+0x82>
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	17 c0       	rjmp	.+46     	; 0x8ea <Endpoint_Read_Control_Stream_LE+0xcc>
     8bc:	82 e0       	ldi	r24, 0x02	; 2
     8be:	15 c0       	rjmp	.+42     	; 0x8ea <Endpoint_Read_Control_Stream_LE+0xcc>
     8c0:	83 e0       	ldi	r24, 0x03	; 3
     8c2:	13 c0       	rjmp	.+38     	; 0x8ea <Endpoint_Read_Control_Stream_LE+0xcc>
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	11 c0       	rjmp	.+34     	; 0x8ea <Endpoint_Read_Control_Stream_LE+0xcc>
     8c8:	82 e0       	ldi	r24, 0x02	; 2
     8ca:	0f c0       	rjmp	.+30     	; 0x8ea <Endpoint_Read_Control_Stream_LE+0xcc>
     8cc:	83 e0       	ldi	r24, 0x03	; 3
     8ce:	0d c0       	rjmp	.+26     	; 0x8ea <Endpoint_Read_Control_Stream_LE+0xcc>
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	0b c0       	rjmp	.+22     	; 0x8ea <Endpoint_Read_Control_Stream_LE+0xcc>
     8d4:	82 e0       	ldi	r24, 0x02	; 2
     8d6:	09 c0       	rjmp	.+18     	; 0x8ea <Endpoint_Read_Control_Stream_LE+0xcc>
     8d8:	83 e0       	ldi	r24, 0x03	; 3
     8da:	07 c0       	rjmp	.+14     	; 0x8ea <Endpoint_Read_Control_Stream_LE+0xcc>
     8dc:	ea 01       	movw	r28, r20
     8de:	88 81       	ld	r24, Y
     8e0:	99 81       	ldd	r25, Y+1	; 0x01
     8e2:	89 2b       	or	r24, r25
     8e4:	09 f0       	breq	.+2      	; 0x8e8 <Endpoint_Read_Control_Stream_LE+0xca>
     8e6:	b5 cf       	rjmp	.-150    	; 0x852 <Endpoint_Read_Control_Stream_LE+0x34>
     8e8:	bf cf       	rjmp	.-130    	; 0x868 <Endpoint_Read_Control_Stream_LE+0x4a>
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	08 95       	ret

000008f0 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     8f0:	ef 92       	push	r14
     8f2:	ff 92       	push	r15
     8f4:	0f 93       	push	r16
     8f6:	1f 93       	push	r17
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     8fc:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <USB_ControlRequest+0x6>
     900:	30 91 24 01 	lds	r19, 0x0124	; 0x800124 <USB_ControlRequest+0x7>
     904:	26 17       	cp	r18, r22
     906:	37 07       	cpc	r19, r23
     908:	58 f0       	brcs	.+22     	; 0x920 <Endpoint_Write_Control_PStream_LE+0x30>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     90a:	61 15       	cp	r22, r1
     90c:	71 05       	cpc	r23, r1
     90e:	39 f4       	brne	.+14     	; 0x91e <Endpoint_Write_Control_PStream_LE+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     910:	e8 ee       	ldi	r30, 0xE8	; 232
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	20 81       	ld	r18, Z
     916:	2e 77       	andi	r18, 0x7E	; 126
     918:	20 83       	st	Z, r18
     91a:	9b 01       	movw	r18, r22
     91c:	01 c0       	rjmp	.+2      	; 0x920 <Endpoint_Write_Control_PStream_LE+0x30>
     91e:	9b 01       	movw	r18, r22
     920:	e8 2f       	mov	r30, r24
     922:	f9 2f       	mov	r31, r25
     924:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     926:	a8 ee       	ldi	r26, 0xE8	; 232
     928:	b0 e0       	ldi	r27, 0x00	; 0
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     92a:	62 ef       	ldi	r22, 0xF2	; 242
     92c:	70 e0       	ldi	r23, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     92e:	0f 2e       	mov	r0, r31
     930:	f1 ef       	ldi	r31, 0xF1	; 241
     932:	ef 2e       	mov	r14, r31
     934:	f1 2c       	mov	r15, r1
     936:	f0 2d       	mov	r31, r0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     938:	11 e0       	ldi	r17, 0x01	; 1
     93a:	00 e0       	ldi	r16, 0x00	; 0
     93c:	30 c0       	rjmp	.+96     	; 0x99e <Endpoint_Write_Control_PStream_LE+0xae>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     93e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     942:	88 23       	and	r24, r24
     944:	09 f4       	brne	.+2      	; 0x948 <Endpoint_Write_Control_PStream_LE+0x58>
     946:	42 c0       	rjmp	.+132    	; 0x9cc <Endpoint_Write_Control_PStream_LE+0xdc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     948:	85 30       	cpi	r24, 0x05	; 5
     94a:	09 f4       	brne	.+2      	; 0x94e <Endpoint_Write_Control_PStream_LE+0x5e>
     94c:	41 c0       	rjmp	.+130    	; 0x9d0 <Endpoint_Write_Control_PStream_LE+0xe0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     94e:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     950:	83 fd       	sbrc	r24, 3
     952:	40 c0       	rjmp	.+128    	; 0x9d4 <Endpoint_Write_Control_PStream_LE+0xe4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     954:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     956:	82 fd       	sbrc	r24, 2
     958:	32 c0       	rjmp	.+100    	; 0x9be <Endpoint_Write_Control_PStream_LE+0xce>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     95a:	8c 91       	ld	r24, X
		  break;

		if (Endpoint_IsINReady())
     95c:	80 ff       	sbrs	r24, 0
     95e:	1f c0       	rjmp	.+62     	; 0x99e <Endpoint_Write_Control_PStream_LE+0xae>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     960:	eb 01       	movw	r28, r22
     962:	48 81       	ld	r20, Y
     964:	59 81       	ldd	r21, Y+1	; 0x01
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     966:	21 15       	cp	r18, r1
     968:	31 05       	cpc	r19, r1
     96a:	89 f0       	breq	.+34     	; 0x98e <Endpoint_Write_Control_PStream_LE+0x9e>
     96c:	48 30       	cpi	r20, 0x08	; 8
     96e:	51 05       	cpc	r21, r1
     970:	70 f4       	brcc	.+28     	; 0x98e <Endpoint_Write_Control_PStream_LE+0x9e>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     972:	84 91       	lpm	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     974:	e7 01       	movw	r28, r14
     976:	88 83       	st	Y, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     978:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     97a:	21 50       	subi	r18, 0x01	; 1
     97c:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
     97e:	4f 5f       	subi	r20, 0xFF	; 255
     980:	5f 4f       	sbci	r21, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     982:	21 15       	cp	r18, r1
     984:	31 05       	cpc	r19, r1
     986:	19 f0       	breq	.+6      	; 0x98e <Endpoint_Write_Control_PStream_LE+0x9e>
     988:	48 30       	cpi	r20, 0x08	; 8
     98a:	51 05       	cpc	r21, r1
     98c:	91 f7       	brne	.-28     	; 0x972 <Endpoint_Write_Control_PStream_LE+0x82>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     98e:	91 2f       	mov	r25, r17
     990:	48 30       	cpi	r20, 0x08	; 8
     992:	51 05       	cpc	r21, r1
     994:	09 f0       	breq	.+2      	; 0x998 <Endpoint_Write_Control_PStream_LE+0xa8>
     996:	90 2f       	mov	r25, r16
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     998:	8c 91       	ld	r24, X
     99a:	8e 77       	andi	r24, 0x7E	; 126
     99c:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     99e:	21 15       	cp	r18, r1
     9a0:	31 05       	cpc	r19, r1
     9a2:	69 f6       	brne	.-102    	; 0x93e <Endpoint_Write_Control_PStream_LE+0x4e>
     9a4:	91 11       	cpse	r25, r1
     9a6:	cb cf       	rjmp	.-106    	; 0x93e <Endpoint_Write_Control_PStream_LE+0x4e>
     9a8:	0a c0       	rjmp	.+20     	; 0x9be <Endpoint_Write_Control_PStream_LE+0xce>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     9aa:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     9ae:	88 23       	and	r24, r24
     9b0:	99 f0       	breq	.+38     	; 0x9d8 <Endpoint_Write_Control_PStream_LE+0xe8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     9b2:	85 30       	cpi	r24, 0x05	; 5
     9b4:	99 f0       	breq	.+38     	; 0x9dc <Endpoint_Write_Control_PStream_LE+0xec>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     9b6:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     9b8:	83 ff       	sbrs	r24, 3
     9ba:	03 c0       	rjmp	.+6      	; 0x9c2 <Endpoint_Write_Control_PStream_LE+0xd2>
     9bc:	11 c0       	rjmp	.+34     	; 0x9e0 <Endpoint_Write_Control_PStream_LE+0xf0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9be:	e8 ee       	ldi	r30, 0xE8	; 232
     9c0:	f0 e0       	ldi	r31, 0x00	; 0
     9c2:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     9c4:	82 ff       	sbrs	r24, 2
     9c6:	f1 cf       	rjmp	.-30     	; 0x9aa <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	0b c0       	rjmp	.+22     	; 0x9e2 <Endpoint_Write_Control_PStream_LE+0xf2>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	09 c0       	rjmp	.+18     	; 0x9e2 <Endpoint_Write_Control_PStream_LE+0xf2>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     9d0:	83 e0       	ldi	r24, 0x03	; 3
     9d2:	07 c0       	rjmp	.+14     	; 0x9e2 <Endpoint_Write_Control_PStream_LE+0xf2>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	05 c0       	rjmp	.+10     	; 0x9e2 <Endpoint_Write_Control_PStream_LE+0xf2>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     9d8:	82 e0       	ldi	r24, 0x02	; 2
     9da:	03 c0       	rjmp	.+6      	; 0x9e2 <Endpoint_Write_Control_PStream_LE+0xf2>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     9dc:	83 e0       	ldi	r24, 0x03	; 3
     9de:	01 c0       	rjmp	.+2      	; 0x9e2 <Endpoint_Write_Control_PStream_LE+0xf2>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     9e0:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	ff 90       	pop	r15
     9ec:	ef 90       	pop	r14
     9ee:	08 95       	ret

000009f0 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     9f0:	8f 92       	push	r8
     9f2:	9f 92       	push	r9
     9f4:	bf 92       	push	r11
     9f6:	cf 92       	push	r12
     9f8:	df 92       	push	r13
     9fa:	ef 92       	push	r14
     9fc:	ff 92       	push	r15
     9fe:	0f 93       	push	r16
     a00:	1f 93       	push	r17
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	87 30       	cpi	r24, 0x07	; 7
     a08:	70 f1       	brcs	.+92     	; 0xa66 <Endpoint_ConfigureEndpoint_Prv+0x76>
     a0a:	26 c0       	rjmp	.+76     	; 0xa58 <Endpoint_ConfigureEndpoint_Prv+0x68>
     a0c:	29 2f       	mov	r18, r25
     a0e:	2f 70       	andi	r18, 0x0F	; 15
     a10:	e7 01       	movw	r28, r14
     a12:	28 83       	st	Y, r18
     a14:	89 17       	cp	r24, r25
     a16:	31 f0       	breq	.+12     	; 0xa24 <Endpoint_ConfigureEndpoint_Prv+0x34>
     a18:	e8 01       	movw	r28, r16
     a1a:	78 81       	ld	r23, Y
     a1c:	20 81       	ld	r18, Z
     a1e:	e4 01       	movw	r28, r8
     a20:	58 81       	ld	r21, Y
     a22:	03 c0       	rjmp	.+6      	; 0xa2a <Endpoint_ConfigureEndpoint_Prv+0x3a>
     a24:	24 2f       	mov	r18, r20
     a26:	76 2f       	mov	r23, r22
     a28:	5b 2d       	mov	r21, r11
     a2a:	21 ff       	sbrs	r18, 1
     a2c:	12 c0       	rjmp	.+36     	; 0xa52 <Endpoint_ConfigureEndpoint_Prv+0x62>
     a2e:	3c 91       	ld	r19, X
     a30:	3e 7f       	andi	r19, 0xFE	; 254
     a32:	3c 93       	st	X, r19
     a34:	30 81       	ld	r19, Z
     a36:	3d 7f       	andi	r19, 0xFD	; 253
     a38:	30 83       	st	Z, r19
     a3a:	3c 91       	ld	r19, X
     a3c:	31 60       	ori	r19, 0x01	; 1
     a3e:	3c 93       	st	X, r19
     a40:	e8 01       	movw	r28, r16
     a42:	78 83       	st	Y, r23
     a44:	20 83       	st	Z, r18
     a46:	e4 01       	movw	r28, r8
     a48:	58 83       	st	Y, r21
     a4a:	e6 01       	movw	r28, r12
     a4c:	28 81       	ld	r18, Y
     a4e:	22 23       	and	r18, r18
     a50:	44 f4       	brge	.+16     	; 0xa62 <Endpoint_ConfigureEndpoint_Prv+0x72>
     a52:	9f 5f       	subi	r25, 0xFF	; 255
     a54:	97 30       	cpi	r25, 0x07	; 7
     a56:	d1 f6       	brne	.-76     	; 0xa0c <Endpoint_ConfigureEndpoint_Prv+0x1c>
     a58:	8f 70       	andi	r24, 0x0F	; 15
     a5a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	21 c0       	rjmp	.+66     	; 0xaa4 <Endpoint_ConfigureEndpoint_Prv+0xb4>
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	1f c0       	rjmp	.+62     	; 0xaa4 <Endpoint_ConfigureEndpoint_Prv+0xb4>
     a66:	98 2f       	mov	r25, r24
     a68:	9f 70       	andi	r25, 0x0F	; 15
     a6a:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     a6e:	98 2f       	mov	r25, r24
     a70:	24 2f       	mov	r18, r20
     a72:	76 2f       	mov	r23, r22
     a74:	50 e0       	ldi	r21, 0x00	; 0
     a76:	ab ee       	ldi	r26, 0xEB	; 235
     a78:	b0 e0       	ldi	r27, 0x00	; 0
     a7a:	ed ee       	ldi	r30, 0xED	; 237
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	0c ee       	ldi	r16, 0xEC	; 236
     a80:	10 e0       	ldi	r17, 0x00	; 0
     a82:	0f 2e       	mov	r0, r31
     a84:	f0 ef       	ldi	r31, 0xF0	; 240
     a86:	8f 2e       	mov	r8, r31
     a88:	91 2c       	mov	r9, r1
     a8a:	f0 2d       	mov	r31, r0
     a8c:	0f 2e       	mov	r0, r31
     a8e:	fe ee       	ldi	r31, 0xEE	; 238
     a90:	cf 2e       	mov	r12, r31
     a92:	d1 2c       	mov	r13, r1
     a94:	f0 2d       	mov	r31, r0
     a96:	0f 2e       	mov	r0, r31
     a98:	f9 ee       	ldi	r31, 0xE9	; 233
     a9a:	ef 2e       	mov	r14, r31
     a9c:	f1 2c       	mov	r15, r1
     a9e:	f0 2d       	mov	r31, r0
     aa0:	b1 2c       	mov	r11, r1
     aa2:	c3 cf       	rjmp	.-122    	; 0xa2a <Endpoint_ConfigureEndpoint_Prv+0x3a>
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	1f 91       	pop	r17
     aaa:	0f 91       	pop	r16
     aac:	ff 90       	pop	r15
     aae:	ef 90       	pop	r14
     ab0:	df 90       	pop	r13
     ab2:	cf 90       	pop	r12
     ab4:	bf 90       	pop	r11
     ab6:	9f 90       	pop	r9
     ab8:	8f 90       	pop	r8
     aba:	08 95       	ret

00000abc <Endpoint_ConfigureEndpointTable>:
     abc:	ef 92       	push	r14
     abe:	ff 92       	push	r15
     ac0:	0f 93       	push	r16
     ac2:	1f 93       	push	r17
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
     ac8:	66 23       	and	r22, r22
     aca:	e9 f1       	breq	.+122    	; 0xb46 <Endpoint_ConfigureEndpointTable+0x8a>
     acc:	06 2f       	mov	r16, r22
     ace:	c8 2f       	mov	r28, r24
     ad0:	d9 2f       	mov	r29, r25
     ad2:	10 e0       	ldi	r17, 0x00	; 0
     ad4:	0f 2e       	mov	r0, r31
     ad6:	f6 e0       	ldi	r31, 0x06	; 6
     ad8:	ff 2e       	mov	r15, r31
     ada:	f0 2d       	mov	r31, r0
     adc:	68 94       	set
     ade:	ee 24       	eor	r14, r14
     ae0:	e1 f8       	bld	r14, 1
     ae2:	58 81       	ld	r21, Y
     ae4:	55 23       	and	r21, r21
     ae6:	49 f1       	breq	.+82     	; 0xb3a <Endpoint_ConfigureEndpointTable+0x7e>
     ae8:	9c 81       	ldd	r25, Y+4	; 0x04
     aea:	e9 81       	ldd	r30, Y+1	; 0x01
     aec:	fa 81       	ldd	r31, Y+2	; 0x02
     aee:	6b 81       	ldd	r22, Y+3	; 0x03
     af0:	85 2f       	mov	r24, r21
     af2:	8f 70       	andi	r24, 0x0F	; 15
     af4:	87 30       	cpi	r24, 0x07	; 7
     af6:	48 f5       	brcc	.+82     	; 0xb4a <Endpoint_ConfigureEndpointTable+0x8e>
     af8:	92 30       	cpi	r25, 0x02	; 2
     afa:	10 f4       	brcc	.+4      	; 0xb00 <Endpoint_ConfigureEndpointTable+0x44>
     afc:	4e 2d       	mov	r20, r14
     afe:	01 c0       	rjmp	.+2      	; 0xb02 <Endpoint_ConfigureEndpointTable+0x46>
     b00:	4f 2d       	mov	r20, r15
     b02:	e9 30       	cpi	r30, 0x09	; 9
     b04:	f1 05       	cpc	r31, r1
     b06:	50 f0       	brcs	.+20     	; 0xb1c <Endpoint_ConfigureEndpointTable+0x60>
     b08:	28 e0       	ldi	r18, 0x08	; 8
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	9f 5f       	subi	r25, 0xFF	; 255
     b10:	22 0f       	add	r18, r18
     b12:	33 1f       	adc	r19, r19
     b14:	2e 17       	cp	r18, r30
     b16:	3f 07       	cpc	r19, r31
     b18:	d0 f3       	brcs	.-12     	; 0xb0e <Endpoint_ConfigureEndpointTable+0x52>
     b1a:	01 c0       	rjmp	.+2      	; 0xb1e <Endpoint_ConfigureEndpointTable+0x62>
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	92 95       	swap	r25
     b20:	90 7f       	andi	r25, 0xF0	; 240
     b22:	49 2b       	or	r20, r25
     b24:	90 e4       	ldi	r25, 0x40	; 64
     b26:	69 9f       	mul	r22, r25
     b28:	b0 01       	movw	r22, r0
     b2a:	11 24       	eor	r1, r1
     b2c:	55 1f       	adc	r21, r21
     b2e:	55 27       	eor	r21, r21
     b30:	55 1f       	adc	r21, r21
     b32:	65 2b       	or	r22, r21
     b34:	5d df       	rcall	.-326    	; 0x9f0 <Endpoint_ConfigureEndpoint_Prv>
     b36:	88 23       	and	r24, r24
     b38:	49 f0       	breq	.+18     	; 0xb4c <Endpoint_ConfigureEndpointTable+0x90>
     b3a:	1f 5f       	subi	r17, 0xFF	; 255
     b3c:	25 96       	adiw	r28, 0x05	; 5
     b3e:	01 13       	cpse	r16, r17
     b40:	d0 cf       	rjmp	.-96     	; 0xae2 <Endpoint_ConfigureEndpointTable+0x26>
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	03 c0       	rjmp	.+6      	; 0xb4c <Endpoint_ConfigureEndpointTable+0x90>
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	01 c0       	rjmp	.+2      	; 0xb4c <Endpoint_ConfigureEndpointTable+0x90>
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	1f 91       	pop	r17
     b52:	0f 91       	pop	r16
     b54:	ff 90       	pop	r15
     b56:	ef 90       	pop	r14
     b58:	08 95       	ret

00000b5a <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     b5a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest>
     b5e:	88 23       	and	r24, r24
     b60:	44 f0       	brlt	.+16     	; 0xb72 <Endpoint_ClearStatusStage+0x18>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b62:	e8 ee       	ldi	r30, 0xE8	; 232
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	14 c0       	rjmp	.+40     	; 0xb90 <Endpoint_ClearStatusStage+0x36>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     b68:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_DeviceState>
     b6c:	81 11       	cpse	r24, r1
     b6e:	03 c0       	rjmp	.+6      	; 0xb76 <Endpoint_ClearStatusStage+0x1c>
     b70:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b72:	e8 ee       	ldi	r30, 0xE8	; 232
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     b78:	82 ff       	sbrs	r24, 2
     b7a:	f6 cf       	rjmp	.-20     	; 0xb68 <Endpoint_ClearStatusStage+0xe>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b7c:	e8 ee       	ldi	r30, 0xE8	; 232
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8b 77       	andi	r24, 0x7B	; 123
     b84:	80 83       	st	Z, r24
     b86:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     b88:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_DeviceState>
     b8c:	88 23       	and	r24, r24
     b8e:	41 f0       	breq	.+16     	; 0xba0 <Endpoint_ClearStatusStage+0x46>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b90:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     b92:	80 ff       	sbrs	r24, 0
     b94:	f9 cf       	rjmp	.-14     	; 0xb88 <Endpoint_ClearStatusStage+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b96:	e8 ee       	ldi	r30, 0xE8	; 232
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	8e 77       	andi	r24, 0x7E	; 126
     b9e:	80 83       	st	Z, r24
     ba0:	08 95       	ret

00000ba2 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     baa:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     bae:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
     bb2:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     bb4:	ac ee       	ldi	r26, 0xEC	; 236
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     bb8:	e8 ee       	ldi	r30, 0xE8	; 232
     bba:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     bbc:	0b ee       	ldi	r16, 0xEB	; 235
     bbe:	10 e0       	ldi	r17, 0x00	; 0
     bc0:	44 ee       	ldi	r20, 0xE4	; 228
     bc2:	50 e0       	ldi	r21, 0x00	; 0
     bc4:	01 c0       	rjmp	.+2      	; 0xbc8 <Endpoint_WaitUntilReady+0x26>
     bc6:	9c 01       	movw	r18, r24
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     bc8:	9c 91       	ld	r25, X
     bca:	89 2f       	mov	r24, r25
     bcc:	81 70       	andi	r24, 0x01	; 1
     bce:	90 fd       	sbrc	r25, 0
     bd0:	1d c0       	rjmp	.+58     	; 0xc0c <Endpoint_WaitUntilReady+0x6a>
     bd2:	20 c0       	rjmp	.+64     	; 0xc14 <Endpoint_WaitUntilReady+0x72>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     bd4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     bd8:	88 23       	and	r24, r24
     bda:	81 f0       	breq	.+32     	; 0xbfc <Endpoint_WaitUntilReady+0x5a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     bdc:	85 30       	cpi	r24, 0x05	; 5
     bde:	81 f0       	breq	.+32     	; 0xc00 <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     be0:	e8 01       	movw	r28, r16
     be2:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     be4:	85 fd       	sbrc	r24, 5
     be6:	0e c0       	rjmp	.+28     	; 0xc04 <Endpoint_WaitUntilReady+0x62>
     be8:	ea 01       	movw	r28, r20
     bea:	88 81       	ld	r24, Y
     bec:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     bee:	28 17       	cp	r18, r24
     bf0:	39 07       	cpc	r19, r25
     bf2:	51 f3       	breq	.-44     	; 0xbc8 <Endpoint_WaitUntilReady+0x26>
     bf4:	61 50       	subi	r22, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     bf6:	39 f7       	brne	.-50     	; 0xbc6 <Endpoint_WaitUntilReady+0x24>
			  return ENDPOINT_READYWAIT_Timeout;
     bf8:	84 e0       	ldi	r24, 0x04	; 4
     bfa:	0f c0       	rjmp	.+30     	; 0xc1a <Endpoint_WaitUntilReady+0x78>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     bfc:	82 e0       	ldi	r24, 0x02	; 2
     bfe:	0d c0       	rjmp	.+26     	; 0xc1a <Endpoint_WaitUntilReady+0x78>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     c00:	83 e0       	ldi	r24, 0x03	; 3
     c02:	0b c0       	rjmp	.+22     	; 0xc1a <Endpoint_WaitUntilReady+0x78>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	09 c0       	rjmp	.+18     	; 0xc1a <Endpoint_WaitUntilReady+0x78>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	07 c0       	rjmp	.+14     	; 0xc1a <Endpoint_WaitUntilReady+0x78>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c0c:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     c0e:	80 ff       	sbrs	r24, 0
     c10:	e1 cf       	rjmp	.-62     	; 0xbd4 <Endpoint_WaitUntilReady+0x32>
     c12:	fa cf       	rjmp	.-12     	; 0xc08 <Endpoint_WaitUntilReady+0x66>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c14:	90 81       	ld	r25, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     c16:	92 ff       	sbrs	r25, 2
     c18:	dd cf       	rjmp	.-70     	; 0xbd4 <Endpoint_WaitUntilReady+0x32>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	1f 91       	pop	r17
     c20:	0f 91       	pop	r16
     c22:	08 95       	ret

00000c24 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     c2c:	4f d0       	rcall	.+158    	; 0xccc <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c2e:	56 d0       	rcall	.+172    	; 0xcdc <USB_INT_ClearAllInterrupts>
     c30:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     c32:	d0 e0       	ldi	r29, 0x00	; 0
     c34:	88 81       	ld	r24, Y
     c36:	8f 77       	andi	r24, 0x7F	; 127
     c38:	88 83       	st	Y, r24
     c3a:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
     c3c:	80 68       	ori	r24, 0x80	; 128
     c3e:	88 83       	st	Y, r24
     c40:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     c42:	8f 7d       	andi	r24, 0xDF	; 223
     c44:	88 83       	st	Y, r24
     c46:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	80 68       	ori	r24, 0x80	; 128
     c4e:	80 83       	st	Z, r24
     c50:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     c52:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     c56:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
     c5a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     c5e:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     c62:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     c64:	10 e0       	ldi	r17, 0x00	; 0
     c66:	f8 01       	movw	r30, r16
     c68:	80 81       	ld	r24, Z
     c6a:	8b 7f       	andi	r24, 0xFB	; 251
     c6c:	80 83       	st	Z, r24
     c6e:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     c70:	81 60       	ori	r24, 0x01	; 1
     c72:	88 83       	st	Y, r24
     c74:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     c76:	60 e0       	ldi	r22, 0x00	; 0
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	ba de       	rcall	.-652    	; 0x9f0 <Endpoint_ConfigureEndpoint_Prv>
     c7c:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	8e 7f       	andi	r24, 0xFE	; 254
     c84:	80 83       	st	Z, r24
     c86:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	81 60       	ori	r24, 0x01	; 1
     c8e:	80 83       	st	Z, r24
     c90:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     c92:	88 60       	ori	r24, 0x08	; 8
     c94:	80 83       	st	Z, r24
     c96:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     c98:	80 81       	ld	r24, Z
     c9a:	8e 7f       	andi	r24, 0xFE	; 254
     c9c:	80 83       	st	Z, r24
     c9e:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     ca0:	80 61       	ori	r24, 0x10	; 16
     ca2:	88 83       	st	Y, r24
     ca4:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     ca6:	cf 91       	pop	r28
     ca8:	1f 91       	pop	r17
     caa:	0f 91       	pop	r16
     cac:	08 95       	ret

00000cae <USB_Init>:
     cae:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	8f 7e       	andi	r24, 0xEF	; 239
     cb6:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     cb8:	e7 ed       	ldi	r30, 0xD7	; 215
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	81 60       	ori	r24, 0x01	; 1
     cc0:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <USB_IsInitialized>

	USB_ResetInterface();
     cc8:	ad cf       	rjmp	.-166    	; 0xc24 <USB_ResetInterface>
     cca:	08 95       	ret

00000ccc <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     ccc:	e8 ed       	ldi	r30, 0xD8	; 216
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	8c 7f       	andi	r24, 0xFC	; 252
     cd4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     cd6:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     cda:	08 95       	ret

00000cdc <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     cdc:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     ce0:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     ce4:	08 95       	ret

00000ce6 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     ce6:	1f 92       	push	r1
     ce8:	0f 92       	push	r0
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	0f 92       	push	r0
     cee:	11 24       	eor	r1, r1
     cf0:	0b b6       	in	r0, 0x3b	; 59
     cf2:	0f 92       	push	r0
     cf4:	2f 93       	push	r18
     cf6:	3f 93       	push	r19
     cf8:	4f 93       	push	r20
     cfa:	5f 93       	push	r21
     cfc:	6f 93       	push	r22
     cfe:	7f 93       	push	r23
     d00:	8f 93       	push	r24
     d02:	9f 93       	push	r25
     d04:	af 93       	push	r26
     d06:	bf 93       	push	r27
     d08:	ef 93       	push	r30
     d0a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     d0c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     d10:	82 ff       	sbrs	r24, 2
     d12:	0a c0       	rjmp	.+20     	; 0xd28 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     d14:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     d18:	82 ff       	sbrs	r24, 2
     d1a:	06 c0       	rjmp	.+12     	; 0xd28 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     d1c:	e1 ee       	ldi	r30, 0xE1	; 225
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	8b 7f       	andi	r24, 0xFB	; 251
     d24:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     d26:	8f d2       	rcall	.+1310   	; 0x1246 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     d28:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     d2c:	80 ff       	sbrs	r24, 0
     d2e:	1d c0       	rjmp	.+58     	; 0xd6a <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     d30:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     d34:	80 ff       	sbrs	r24, 0
     d36:	19 c0       	rjmp	.+50     	; 0xd6a <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     d38:	ea ed       	ldi	r30, 0xDA	; 218
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	8e 7f       	andi	r24, 0xFE	; 254
     d40:	80 83       	st	Z, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     d42:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     d46:	80 ff       	sbrs	r24, 0
     d48:	0c c0       	rjmp	.+24     	; 0xd62 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     d4a:	84 e1       	ldi	r24, 0x14	; 20
     d4c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     d4e:	86 e1       	ldi	r24, 0x16	; 22
     d50:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     d52:	09 b4       	in	r0, 0x29	; 41
     d54:	00 fe       	sbrs	r0, 0
     d56:	fd cf       	rjmp	.-6      	; 0xd52 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <USB_DeviceState>
			EVENT_USB_Device_Connect();
     d5e:	49 d2       	rcall	.+1170   	; 0x11f2 <EVENT_USB_Device_Connect>
     d60:	04 c0       	rjmp	.+8      	; 0xd6a <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     d62:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     d64:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
     d68:	4c d2       	rcall	.+1176   	; 0x1202 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     d6a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     d6e:	80 ff       	sbrs	r24, 0
     d70:	16 c0       	rjmp	.+44     	; 0xd9e <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     d72:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     d76:	80 ff       	sbrs	r24, 0
     d78:	12 c0       	rjmp	.+36     	; 0xd9e <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     d7a:	e2 ee       	ldi	r30, 0xE2	; 226
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	8e 7f       	andi	r24, 0xFE	; 254
     d82:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     d84:	80 81       	ld	r24, Z
     d86:	80 61       	ori	r24, 0x10	; 16
     d88:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     d8a:	e8 ed       	ldi	r30, 0xD8	; 216
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	80 62       	ori	r24, 0x20	; 32
     d92:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     d94:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     d96:	85 e0       	ldi	r24, 0x05	; 5
     d98:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <USB_DeviceState>
		EVENT_USB_Device_Suspend();
     d9c:	e0 d1       	rcall	.+960    	; 0x115e <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     d9e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     da2:	84 ff       	sbrs	r24, 4
     da4:	2f c0       	rjmp	.+94     	; 0xe04 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     da6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     daa:	84 ff       	sbrs	r24, 4
     dac:	2b c0       	rjmp	.+86     	; 0xe04 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     dae:	84 e1       	ldi	r24, 0x14	; 20
     db0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     db2:	86 e1       	ldi	r24, 0x16	; 22
     db4:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     db6:	09 b4       	in	r0, 0x29	; 41
     db8:	00 fe       	sbrs	r0, 0
     dba:	fd cf       	rjmp	.-6      	; 0xdb6 <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     dbc:	e8 ed       	ldi	r30, 0xD8	; 216
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	8f 7d       	andi	r24, 0xDF	; 223
     dc4:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     dc6:	e1 ee       	ldi	r30, 0xE1	; 225
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	8f 7e       	andi	r24, 0xEF	; 239
     dce:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     dd0:	e2 ee       	ldi	r30, 0xE2	; 226
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	8f 7e       	andi	r24, 0xEF	; 239
     dd8:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     dda:	80 81       	ld	r24, Z
     ddc:	81 60       	ori	r24, 0x01	; 1
     dde:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     de0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_Device_ConfigurationNumber>
     de4:	88 23       	and	r24, r24
     de6:	21 f0       	breq	.+8      	; 0xdf0 <__vector_10+0x10a>
		  USB_DeviceState = DEVICE_STATE_Configured;
     de8:	84 e0       	ldi	r24, 0x04	; 4
     dea:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <USB_DeviceState>
     dee:	09 c0       	rjmp	.+18     	; 0xe02 <__vector_10+0x11c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     df0:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     df4:	88 23       	and	r24, r24
     df6:	14 f0       	brlt	.+4      	; 0xdfc <__vector_10+0x116>
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	01 c0       	rjmp	.+2      	; 0xdfe <__vector_10+0x118>
     dfc:	83 e0       	ldi	r24, 0x03	; 3
     dfe:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     e02:	ad d1       	rcall	.+858    	; 0x115e <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     e04:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     e08:	83 ff       	sbrs	r24, 3
     e0a:	1e c0       	rjmp	.+60     	; 0xe48 <__vector_10+0x162>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     e0c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     e10:	83 ff       	sbrs	r24, 3
     e12:	1a c0       	rjmp	.+52     	; 0xe48 <__vector_10+0x162>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     e14:	e1 ee       	ldi	r30, 0xE1	; 225
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	87 7f       	andi	r24, 0xF7	; 247
     e1c:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     e1e:	82 e0       	ldi	r24, 0x02	; 2
     e20:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     e24:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     e28:	80 81       	ld	r24, Z
     e2a:	8e 7f       	andi	r24, 0xFE	; 254
     e2c:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     e2e:	e2 ee       	ldi	r30, 0xE2	; 226
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	8e 7f       	andi	r24, 0xFE	; 254
     e36:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     e38:	80 81       	ld	r24, Z
     e3a:	80 61       	ori	r24, 0x10	; 16
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     e3c:	80 83       	st	Z, r24
     e3e:	42 e0       	ldi	r20, 0x02	; 2
     e40:	60 e0       	ldi	r22, 0x00	; 0
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	d5 dd       	rcall	.-1110   	; 0x9f0 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     e46:	8b d1       	rcall	.+790    	; 0x115e <USB_Event_Stub>
     e48:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     e4a:	ef 91       	pop	r30
     e4c:	bf 91       	pop	r27
     e4e:	af 91       	pop	r26
     e50:	9f 91       	pop	r25
     e52:	8f 91       	pop	r24
     e54:	7f 91       	pop	r23
     e56:	6f 91       	pop	r22
     e58:	5f 91       	pop	r21
     e5a:	4f 91       	pop	r20
     e5c:	3f 91       	pop	r19
     e5e:	2f 91       	pop	r18
     e60:	0f 90       	pop	r0
     e62:	0b be       	out	0x3b, r0	; 59
     e64:	0f 90       	pop	r0
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	0f 90       	pop	r0
     e6a:	1f 90       	pop	r1
     e6c:	18 95       	reti

00000e6e <USB_Device_ProcessControlRequest>:
     e6e:	0f 93       	push	r16
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     e70:	1f 93       	push	r17
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
     e7a:	aa 97       	sbiw	r28, 0x2a	; 42
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	f8 94       	cli
     e80:	de bf       	out	0x3e, r29	; 62
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	cd bf       	out	0x3d, r28	; 61
     e86:	ed e1       	ldi	r30, 0x1D	; 29
     e88:	f1 e0       	ldi	r31, 0x01	; 1
     e8a:	25 e2       	ldi	r18, 0x25	; 37
     e8c:	31 e0       	ldi	r19, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     e8e:	a1 ef       	ldi	r26, 0xF1	; 241
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	8c 91       	ld	r24, X
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     e94:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     e96:	2e 17       	cp	r18, r30
     e98:	3f 07       	cpc	r19, r31
     e9a:	d9 f7       	brne	.-10     	; 0xe92 <USB_Device_ProcessControlRequest+0x24>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     e9c:	cf d1       	rcall	.+926    	; 0x123c <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e9e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
     ea2:	83 ff       	sbrs	r24, 3
     ea4:	37 c1       	rjmp	.+622    	; 0x1114 <__EEPROM_REGION_LENGTH__+0x114>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     ea6:	ed e1       	ldi	r30, 0x1D	; 29
     ea8:	f1 e0       	ldi	r31, 0x01	; 1
     eaa:	90 81       	ld	r25, Z

		switch (USB_ControlRequest.bRequest)
     eac:	81 81       	ldd	r24, Z+1	; 0x01
     eae:	85 30       	cpi	r24, 0x05	; 5
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <USB_Device_ProcessControlRequest+0x46>
     eb2:	7f c0       	rjmp	.+254    	; 0xfb2 <USB_Device_ProcessControlRequest+0x144>
     eb4:	30 f4       	brcc	.+12     	; 0xec2 <USB_Device_ProcessControlRequest+0x54>
     eb6:	81 30       	cpi	r24, 0x01	; 1
     eb8:	c9 f1       	breq	.+114    	; 0xf2c <USB_Device_ProcessControlRequest+0xbe>
     eba:	68 f0       	brcs	.+26     	; 0xed6 <USB_Device_ProcessControlRequest+0x68>
     ebc:	83 30       	cpi	r24, 0x03	; 3
     ebe:	b1 f1       	breq	.+108    	; 0xf2c <USB_Device_ProcessControlRequest+0xbe>
     ec0:	29 c1       	rjmp	.+594    	; 0x1114 <__EEPROM_REGION_LENGTH__+0x114>
     ec2:	88 30       	cpi	r24, 0x08	; 8
     ec4:	09 f4       	brne	.+2      	; 0xec8 <USB_Device_ProcessControlRequest+0x5a>
     ec6:	f1 c0       	rjmp	.+482    	; 0x10aa <__EEPROM_REGION_LENGTH__+0xaa>
     ec8:	89 30       	cpi	r24, 0x09	; 9
     eca:	09 f4       	brne	.+2      	; 0xece <USB_Device_ProcessControlRequest+0x60>
     ecc:	fe c0       	rjmp	.+508    	; 0x10ca <__EEPROM_REGION_LENGTH__+0xca>
     ece:	86 30       	cpi	r24, 0x06	; 6
     ed0:	09 f0       	breq	.+2      	; 0xed4 <USB_Device_ProcessControlRequest+0x66>
     ed2:	20 c1       	rjmp	.+576    	; 0x1114 <__EEPROM_REGION_LENGTH__+0x114>
     ed4:	91 c0       	rjmp	.+290    	; 0xff8 <USB_Device_ProcessControlRequest+0x18a>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ed6:	90 38       	cpi	r25, 0x80	; 128
     ed8:	21 f0       	breq	.+8      	; 0xee2 <USB_Device_ProcessControlRequest+0x74>
     eda:	92 38       	cpi	r25, 0x82	; 130
     edc:	09 f0       	breq	.+2      	; 0xee0 <USB_Device_ProcessControlRequest+0x72>
     ede:	1a c1       	rjmp	.+564    	; 0x1114 <__EEPROM_REGION_LENGTH__+0x114>
     ee0:	08 c0       	rjmp	.+16     	; 0xef2 <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     ee2:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     ee6:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <USB_Device_RemoteWakeupEnabled>
     eea:	99 23       	and	r25, r25
     eec:	89 f0       	breq	.+34     	; 0xf10 <USB_Device_ProcessControlRequest+0xa2>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     eee:	82 60       	ori	r24, 0x02	; 2
     ef0:	0f c0       	rjmp	.+30     	; 0xf10 <USB_Device_ProcessControlRequest+0xa2>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     ef2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <USB_ControlRequest+0x4>
     ef6:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     ef8:	87 30       	cpi	r24, 0x07	; 7
     efa:	08 f0       	brcs	.+2      	; 0xefe <USB_Device_ProcessControlRequest+0x90>
     efc:	0b c1       	rjmp	.+534    	; 0x1114 <__EEPROM_REGION_LENGTH__+0x114>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     efe:	e9 ee       	ldi	r30, 0xE9	; 233
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     f04:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
     f08:	85 fb       	bst	r24, 5
     f0a:	88 27       	eor	r24, r24
     f0c:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f0e:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f10:	e8 ee       	ldi	r30, 0xE8	; 232
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	90 81       	ld	r25, Z
     f16:	97 7f       	andi	r25, 0xF7	; 247
     f18:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     f1a:	a1 ef       	ldi	r26, 0xF1	; 241
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	8c 93       	st	X, r24
				UEDATX = (Data >> 8);
     f20:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f22:	80 81       	ld	r24, Z
     f24:	8e 77       	andi	r24, 0x7E	; 126
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     f26:	80 83       	st	Z, r24
     f28:	18 de       	rcall	.-976    	; 0xb5a <Endpoint_ClearStatusStage>
     f2a:	f4 c0       	rjmp	.+488    	; 0x1114 <__EEPROM_REGION_LENGTH__+0x114>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     f2c:	99 23       	and	r25, r25
     f2e:	09 f4       	brne	.+2      	; 0xf32 <USB_Device_ProcessControlRequest+0xc4>
     f30:	00 c1       	rjmp	.+512    	; 0x1132 <__EEPROM_REGION_LENGTH__+0x132>
     f32:	92 30       	cpi	r25, 0x02	; 2
     f34:	09 f0       	breq	.+2      	; 0xf38 <USB_Device_ProcessControlRequest+0xca>
     f36:	ee c0       	rjmp	.+476    	; 0x1114 <__EEPROM_REGION_LENGTH__+0x114>
     f38:	01 c1       	rjmp	.+514    	; 0x113c <__EEPROM_REGION_LENGTH__+0x13c>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     f3a:	91 e0       	ldi	r25, 0x01	; 1
     f3c:	83 30       	cpi	r24, 0x03	; 3
     f3e:	09 f0       	breq	.+2      	; 0xf42 <USB_Device_ProcessControlRequest+0xd4>
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <USB_Device_RemoteWakeupEnabled>
     f46:	2c c0       	rjmp	.+88     	; 0xfa0 <USB_Device_ProcessControlRequest+0x132>
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     f48:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <USB_ControlRequest+0x4>
     f4c:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     f4e:	9f ef       	ldi	r25, 0xFF	; 255
     f50:	98 0f       	add	r25, r24
     f52:	96 30       	cpi	r25, 0x06	; 6
     f54:	08 f0       	brcs	.+2      	; 0xf58 <USB_Device_ProcessControlRequest+0xea>
     f56:	de c0       	rjmp	.+444    	; 0x1114 <__EEPROM_REGION_LENGTH__+0x114>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f58:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     f5c:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     f60:	90 ff       	sbrs	r25, 0
     f62:	1e c0       	rjmp	.+60     	; 0xfa0 <USB_Device_ProcessControlRequest+0x132>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     f64:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <USB_ControlRequest+0x1>
     f68:	93 30       	cpi	r25, 0x03	; 3
     f6a:	31 f4       	brne	.+12     	; 0xf78 <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     f6c:	eb ee       	ldi	r30, 0xEB	; 235
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	80 62       	ori	r24, 0x20	; 32
     f74:	80 83       	st	Z, r24
     f76:	14 c0       	rjmp	.+40     	; 0xfa0 <USB_Device_ProcessControlRequest+0x132>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     f78:	eb ee       	ldi	r30, 0xEB	; 235
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	90 81       	ld	r25, Z
     f7e:	90 61       	ori	r25, 0x10	; 16
     f80:	90 83       	st	Z, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     f82:	21 e0       	ldi	r18, 0x01	; 1
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	a9 01       	movw	r20, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <USB_Device_ProcessControlRequest+0x120>
     f8a:	44 0f       	add	r20, r20
     f8c:	55 1f       	adc	r21, r21
     f8e:	8a 95       	dec	r24
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <USB_Device_ProcessControlRequest+0x11c>
     f92:	aa ee       	ldi	r26, 0xEA	; 234
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	4c 93       	st	X, r20
				UERST = 0;
     f98:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     f9a:	80 81       	ld	r24, Z
     f9c:	88 60       	ori	r24, 0x08	; 8
     f9e:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fa0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fa4:	e8 ee       	ldi	r30, 0xE8	; 232
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	87 7f       	andi	r24, 0xF7	; 247

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     fac:	80 83       	st	Z, r24
     fae:	d5 dd       	rcall	.-1110   	; 0xb5a <Endpoint_ClearStatusStage>
     fb0:	b1 c0       	rjmp	.+354    	; 0x1114 <__EEPROM_REGION_LENGTH__+0x114>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     fb2:	91 11       	cpse	r25, r1
     fb4:	af c0       	rjmp	.+350    	; 0x1114 <__EEPROM_REGION_LENGTH__+0x114>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     fb6:	10 91 1f 01 	lds	r17, 0x011F	; 0x80011f <USB_ControlRequest+0x2>
     fba:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     fbc:	e3 ee       	ldi	r30, 0xE3	; 227
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	80 78       	andi	r24, 0x80	; 128
     fc4:	81 2b       	or	r24, r17
     fc6:	80 83       	st	Z, r24
     fc8:	e8 ee       	ldi	r30, 0xE8	; 232
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	87 7f       	andi	r24, 0xF7	; 247

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     fd0:	80 83       	st	Z, r24
     fd2:	c3 dd       	rcall	.-1146   	; 0xb5a <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     fd4:	e8 ee       	ldi	r30, 0xE8	; 232
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z

	while (!(Endpoint_IsINReady()));
     fda:	80 ff       	sbrs	r24, 0
     fdc:	fd cf       	rjmp	.-6      	; 0xfd8 <USB_Device_ProcessControlRequest+0x16a>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     fde:	e3 ee       	ldi	r30, 0xE3	; 227
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	80 68       	ori	r24, 0x80	; 128
     fe6:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     fe8:	11 11       	cpse	r17, r1
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <USB_Device_ProcessControlRequest+0x182>
     fec:	82 e0       	ldi	r24, 0x02	; 2
     fee:	01 c0       	rjmp	.+2      	; 0xff2 <USB_Device_ProcessControlRequest+0x184>
     ff0:	83 e0       	ldi	r24, 0x03	; 3
     ff2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <USB_DeviceState>
     ff6:	8e c0       	rjmp	.+284    	; 0x1114 <__EEPROM_REGION_LENGTH__+0x114>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ff8:	90 58       	subi	r25, 0x80	; 128
     ffa:	92 30       	cpi	r25, 0x02	; 2
     ffc:	08 f0       	brcs	.+2      	; 0x1000 <__EEPROM_REGION_LENGTH__>
     ffe:	8a c0       	rjmp	.+276    	; 0x1114 <__EEPROM_REGION_LENGTH__+0x114>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1000:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <USB_ControlRequest+0x2>
    1004:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <USB_ControlRequest+0x3>
    1008:	8c 3d       	cpi	r24, 0xDC	; 220
    100a:	53 e0       	ldi	r21, 0x03	; 3
    100c:	95 07       	cpc	r25, r21
    100e:	99 f5       	brne	.+102    	; 0x1076 <__EEPROM_REGION_LENGTH__+0x76>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1010:	83 e0       	ldi	r24, 0x03	; 3
    1012:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1014:	8a e2       	ldi	r24, 0x2A	; 42
    1016:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1018:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    101a:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    101c:	de 01       	movw	r26, r28
    101e:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1020:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1022:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1024:	41 e2       	ldi	r20, 0x21	; 33
    1026:	e3 2f       	mov	r30, r19
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	40 93 57 00 	sts	0x0057, r20	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    102e:	84 91       	lpm	r24, Z

					if (SerialCharNum & 0x01)
    1030:	20 ff       	sbrs	r18, 0
    1032:	03 c0       	rjmp	.+6      	; 0x103a <__EEPROM_REGION_LENGTH__+0x3a>
					{
						SerialByte >>= 4;
    1034:	82 95       	swap	r24
    1036:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    1038:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    103a:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    103c:	8a 30       	cpi	r24, 0x0A	; 10
    103e:	18 f0       	brcs	.+6      	; 0x1046 <__EEPROM_REGION_LENGTH__+0x46>
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	c7 96       	adiw	r24, 0x37	; 55
    1044:	02 c0       	rjmp	.+4      	; 0x104a <__EEPROM_REGION_LENGTH__+0x4a>
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	c0 96       	adiw	r24, 0x30	; 48
    104a:	8d 93       	st	X+, r24
    104c:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    104e:	2f 5f       	subi	r18, 0xFF	; 255
    1050:	24 31       	cpi	r18, 0x14	; 20
    1052:	49 f7       	brne	.-46     	; 0x1026 <__EEPROM_REGION_LENGTH__+0x26>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1054:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1056:	08 ee       	ldi	r16, 0xE8	; 232
    1058:	10 e0       	ldi	r17, 0x00	; 0
    105a:	f8 01       	movw	r30, r16
    105c:	80 81       	ld	r24, Z
    105e:	87 7f       	andi	r24, 0xF7	; 247
    1060:	80 83       	st	Z, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1062:	6a e2       	ldi	r22, 0x2A	; 42
    1064:	70 e0       	ldi	r23, 0x00	; 0
    1066:	ce 01       	movw	r24, r28
    1068:	01 96       	adiw	r24, 0x01	; 1
    106a:	5a db       	rcall	.-2380   	; 0x720 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    106c:	f8 01       	movw	r30, r16
    106e:	80 81       	ld	r24, Z
    1070:	8b 77       	andi	r24, 0x7B	; 123
    1072:	80 83       	st	Z, r24
    1074:	4f c0       	rjmp	.+158    	; 0x1114 <__EEPROM_REGION_LENGTH__+0x114>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1076:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <USB_ControlRequest+0x4>
    107a:	70 91 22 01 	lds	r23, 0x0122	; 0x800122 <USB_ControlRequest+0x5>
    107e:	ae 01       	movw	r20, r28
    1080:	4f 5f       	subi	r20, 0xFF	; 255
    1082:	5f 4f       	sbci	r21, 0xFF	; 255
    1084:	86 d8       	rcall	.-3828   	; 0x192 <CALLBACK_USB_GetDescriptor>
    1086:	bc 01       	movw	r22, r24
    1088:	89 2b       	or	r24, r25
    108a:	09 f4       	brne	.+2      	; 0x108e <__EEPROM_REGION_LENGTH__+0x8e>
    108c:	43 c0       	rjmp	.+134    	; 0x1114 <__EEPROM_REGION_LENGTH__+0x114>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    108e:	08 ee       	ldi	r16, 0xE8	; 232
    1090:	10 e0       	ldi	r17, 0x00	; 0
    1092:	f8 01       	movw	r30, r16
    1094:	90 81       	ld	r25, Z
    1096:	97 7f       	andi	r25, 0xF7	; 247
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1098:	90 83       	st	Z, r25
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	9a 81       	ldd	r25, Y+2	; 0x02
    109e:	28 dc       	rcall	.-1968   	; 0x8f0 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    10a0:	f8 01       	movw	r30, r16
    10a2:	80 81       	ld	r24, Z
    10a4:	8b 77       	andi	r24, 0x7B	; 123
    10a6:	80 83       	st	Z, r24
    10a8:	35 c0       	rjmp	.+106    	; 0x1114 <__EEPROM_REGION_LENGTH__+0x114>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    10aa:	90 38       	cpi	r25, 0x80	; 128
    10ac:	99 f5       	brne	.+102    	; 0x1114 <__EEPROM_REGION_LENGTH__+0x114>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10ae:	e8 ee       	ldi	r30, 0xE8	; 232
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	87 7f       	andi	r24, 0xF7	; 247
    10b6:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    10b8:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    10bc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10c0:	80 81       	ld	r24, Z
    10c2:	8e 77       	andi	r24, 0x7E	; 126
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    10c4:	80 83       	st	Z, r24
    10c6:	49 dd       	rcall	.-1390   	; 0xb5a <Endpoint_ClearStatusStage>
    10c8:	25 c0       	rjmp	.+74     	; 0x1114 <__EEPROM_REGION_LENGTH__+0x114>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    10ca:	91 11       	cpse	r25, r1
    10cc:	23 c0       	rjmp	.+70     	; 0x1114 <__EEPROM_REGION_LENGTH__+0x114>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    10ce:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <USB_ControlRequest+0x2>
    10d2:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <USB_ControlRequest+0x3>
    10d6:	99 27       	eor	r25, r25
    10d8:	02 97       	sbiw	r24, 0x02	; 2
    10da:	e4 f4       	brge	.+56     	; 0x1114 <__EEPROM_REGION_LENGTH__+0x114>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10dc:	e8 ee       	ldi	r30, 0xE8	; 232
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	87 7f       	andi	r24, 0xF7	; 247
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    10e4:	80 83       	st	Z, r24
    10e6:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <USB_ControlRequest+0x2>
    10ea:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    10ee:	35 dd       	rcall	.-1430   	; 0xb5a <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    10f0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_Device_ConfigurationNumber>
    10f4:	88 23       	and	r24, r24
    10f6:	21 f0       	breq	.+8      	; 0x1100 <__EEPROM_REGION_LENGTH__+0x100>
	  USB_DeviceState = DEVICE_STATE_Configured;
    10f8:	84 e0       	ldi	r24, 0x04	; 4
    10fa:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <USB_DeviceState>
    10fe:	09 c0       	rjmp	.+18     	; 0x1112 <__EEPROM_REGION_LENGTH__+0x112>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1100:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1104:	88 23       	and	r24, r24
    1106:	14 f0       	brlt	.+4      	; 0x110c <__EEPROM_REGION_LENGTH__+0x10c>
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	01 c0       	rjmp	.+2      	; 0x110e <__EEPROM_REGION_LENGTH__+0x10e>
    110c:	84 e0       	ldi	r24, 0x04	; 4
    110e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    1112:	7d d0       	rcall	.+250    	; 0x120e <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1114:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1118:	83 ff       	sbrs	r24, 3
    111a:	16 c0       	rjmp	.+44     	; 0x1148 <__EEPROM_REGION_LENGTH__+0x148>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    111c:	e8 ee       	ldi	r30, 0xE8	; 232
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	87 7f       	andi	r24, 0xF7	; 247
    1124:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1126:	eb ee       	ldi	r30, 0xEB	; 235
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	80 62       	ori	r24, 0x20	; 32
    112e:	80 83       	st	Z, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1130:	0b c0       	rjmp	.+22     	; 0x1148 <__EEPROM_REGION_LENGTH__+0x148>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1132:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <USB_ControlRequest+0x2>
    1136:	91 30       	cpi	r25, 0x01	; 1
    1138:	69 f7       	brne	.-38     	; 0x1114 <__EEPROM_REGION_LENGTH__+0x114>
    113a:	ff ce       	rjmp	.-514    	; 0xf3a <USB_Device_ProcessControlRequest+0xcc>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    113c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <USB_ControlRequest+0x2>
    1140:	88 23       	and	r24, r24
    1142:	09 f4       	brne	.+2      	; 0x1146 <__EEPROM_REGION_LENGTH__+0x146>
    1144:	01 cf       	rjmp	.-510    	; 0xf48 <USB_Device_ProcessControlRequest+0xda>
    1146:	2c cf       	rjmp	.-424    	; 0xfa0 <USB_Device_ProcessControlRequest+0x132>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1148:	aa 96       	adiw	r28, 0x2a	; 42
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	f8 94       	cli
    114e:	de bf       	out	0x3e, r29	; 62
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	cd bf       	out	0x3d, r28	; 61
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	1f 91       	pop	r17
    115a:	0f 91       	pop	r16
    115c:	08 95       	ret

0000115e <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    115e:	08 95       	ret

00001160 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1160:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1162:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_DeviceState>
    1166:	88 23       	and	r24, r24
    1168:	99 f0       	breq	.+38     	; 0x1190 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    116a:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    116e:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1170:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1174:	98 2f       	mov	r25, r24
    1176:	91 70       	andi	r25, 0x01	; 1
    1178:	80 fd       	sbrc	r24, 0
    117a:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    117c:	c9 2b       	or	r28, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    117e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1182:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1186:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    1188:	72 de       	rcall	.-796    	; 0xe6e <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    118a:	cf 70       	andi	r28, 0x0F	; 15
    118c:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1190:	cf 91       	pop	r28
    1192:	08 95       	ret

00001194 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware()
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    1194:	84 b7       	in	r24, 0x34	; 52
    1196:	87 7f       	andi	r24, 0xF7	; 247
    1198:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	a8 95       	wdr
    11a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    11a4:	88 61       	ori	r24, 0x18	; 24
    11a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    11aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    11ae:	0f be       	out	0x3f, r0	; 63
	wdt_disable();

	/* Disable clock division */
	// Implementation missing - http://savannah.nongnu.org/bugs/?39061
	// clock_prescale_set(clock_div_1);
	CLKPR = (1 << CLKPCE);
    11b0:	e1 e6       	ldi	r30, 0x61	; 97
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 e8       	ldi	r24, 0x80	; 128
    11b6:	80 83       	st	Z, r24
	CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
    11b8:	10 82       	st	Z, r1

/* Inline Functions: */
static inline void LEDs_Init(void)
{
	// initialize LED port pins as outputs here
	DDRB |= LEDS_LED1;
    11ba:	27 9a       	sbi	0x04, 7	; 4
	DDRC |= LEDS_GB;
    11bc:	87 b1       	in	r24, 0x07	; 7
    11be:	80 66       	ori	r24, 0x60	; 96
    11c0:	87 b9       	out	0x07, r24	; 7

	// Initialize to off by driving high
	PORTB |= LEDS_LED1;
    11c2:	2f 9a       	sbi	0x05, 7	; 5
	PORTC |= LEDS_GB;
    11c4:	88 b1       	in	r24, 0x08	; 8
    11c6:	80 66       	ori	r24, 0x60	; 96
    11c8:	88 b9       	out	0x08, r24	; 8

static inline void Buttons_Init(void)
{
	// Initialize the appropriate port pins as an inputs here, with pull-ups
	// See Atmel doc 7799, section 12.2.3
	DDRD &= ~BUTTONS_ALL;
    11ca:	8a b1       	in	r24, 0x0a	; 10
    11cc:	8d 76       	andi	r24, 0x6D	; 109
    11ce:	8a b9       	out	0x0a, r24	; 10
	PORTD |= BUTTONS_ALL;
    11d0:	8b b1       	in	r24, 0x0b	; 11
    11d2:	82 69       	ori	r24, 0x92	; 146
    11d4:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	LEDs_Init();
	Buttons_Init();
	USB_Init();
    11d6:	6b cd       	rjmp	.-1322   	; 0xcae <USB_Init>
    11d8:	08 95       	ret

000011da <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
    11da:	dc df       	rcall	.-72     	; 0x1194 <SetupHardware>
}

static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
{
	// turn on only LEDs given in the LEDMask mask here, all others off
	PORTB = ( (PORTB | LEDS_LED1) & ~LEDMask);
    11dc:	2f 98       	cbi	0x05, 7	; 5
	PORTC = ( (PORTC | LEDS_GB) & ~LEDMask);
    11de:	88 b1       	in	r24, 0x08	; 8
    11e0:	80 66       	ori	r24, 0x60	; 96
    11e2:	8f 77       	andi	r24, 0x7F	; 127
    11e4:	88 b9       	out	0x08, r24	; 8
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    11e6:	78 94       	sei
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	GlobalInterruptEnable();

	for (;;)
	{
		HID_Device_USBTask(&Keyboard_HID_Interface);
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	91 e0       	ldi	r25, 0x01	; 1
		USB_USBTask();
    11ec:	7f d9       	rcall	.-3330   	; 0x4ec <HID_Device_USBTask>
    11ee:	b8 df       	rcall	.-144    	; 0x1160 <USB_USBTask>
    11f0:	fb cf       	rjmp	.-10     	; 0x11e8 <main+0xe>

000011f2 <EVENT_USB_Device_Connect>:
}

static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
{
	// turn on only LEDs given in the LEDMask mask here, all others off
	PORTB = ( (PORTB | LEDS_LED1) & ~LEDMask);
    11f2:	85 b1       	in	r24, 0x05	; 5
    11f4:	8f 73       	andi	r24, 0x3F	; 63
    11f6:	85 b9       	out	0x05, r24	; 5
	PORTC = ( (PORTC | LEDS_GB) & ~LEDMask);
    11f8:	88 b1       	in	r24, 0x08	; 8
    11fa:	80 66       	ori	r24, 0x60	; 96
    11fc:	8f 73       	andi	r24, 0x3F	; 63
    11fe:	88 b9       	out	0x08, r24	; 8
    1200:	08 95       	ret

00001202 <EVENT_USB_Device_Disconnect>:
}

static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
{
	// turn on only LEDs given in the LEDMask mask here, all others off
	PORTB = ( (PORTB | LEDS_LED1) & ~LEDMask);
    1202:	2f 98       	cbi	0x05, 7	; 5
	PORTC = ( (PORTC | LEDS_GB) & ~LEDMask);
    1204:	88 b1       	in	r24, 0x08	; 8
    1206:	80 66       	ori	r24, 0x60	; 96
    1208:	8f 77       	andi	r24, 0x7F	; 127
    120a:	88 b9       	out	0x08, r24	; 8
    120c:	08 95       	ret

0000120e <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	91 e0       	ldi	r25, 0x01	; 1
    1212:	58 d9       	rcall	.-3408   	; 0x4c4 <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    1214:	e2 ee       	ldi	r30, 0xE2	; 226
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	90 81       	ld	r25, Z
    121a:	94 60       	ori	r25, 0x04	; 4
    121c:	90 83       	st	Z, r25

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
    121e:	81 11       	cpse	r24, r1
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <EVENT_USB_Device_ConfigurationChanged+0x18>
    1222:	80 ea       	ldi	r24, 0xA0	; 160
    1224:	01 c0       	rjmp	.+2      	; 0x1228 <EVENT_USB_Device_ConfigurationChanged+0x1a>
    1226:	80 e4       	ldi	r24, 0x40	; 64
}

static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
{
	// turn on only LEDs given in the LEDMask mask here, all others off
	PORTB = ( (PORTB | LEDS_LED1) & ~LEDMask);
    1228:	95 b1       	in	r25, 0x05	; 5
    122a:	80 95       	com	r24
    122c:	90 68       	ori	r25, 0x80	; 128
    122e:	98 23       	and	r25, r24
    1230:	95 b9       	out	0x05, r25	; 5
	PORTC = ( (PORTC | LEDS_GB) & ~LEDMask);
    1232:	98 b1       	in	r25, 0x08	; 8
    1234:	90 66       	ori	r25, 0x60	; 96
    1236:	89 23       	and	r24, r25
    1238:	88 b9       	out	0x08, r24	; 8
    123a:	08 95       	ret

0000123c <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	91 e0       	ldi	r25, 0x01	; 1
    1240:	0c 94 18 01 	jmp	0x230	; 0x230 <HID_Device_ProcessControlRequest>
    1244:	08 95       	ret

00001246 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
    1246:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
    124a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	29 f0       	breq	.+10     	; 0x125c <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
    1258:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
    125c:	08 95       	ret

0000125e <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
uint8_t* const ReportID,
const uint8_t ReportType,
void* ReportData,
uint16_t* const ReportSize)
{
    125e:	0f 93       	push	r16
    1260:	1f 93       	push	r17
}

static inline uint8_t Buttons_GetStatus(void)
{
	// Return current button status here, debounced if required
	return ((PIND & BUTTONS_ALL) ^ BUTTONS_ALL);
    1262:	89 b1       	in	r24, 0x09	; 9
    1264:	80 95       	com	r24
    1266:	48 2f       	mov	r20, r24
    1268:	42 79       	andi	r20, 0x92	; 146
	
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	uint8_t UsedKeyCodes = 0;

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
    126a:	81 ff       	sbrs	r24, 1
    126c:	05 c0       	rjmp	.+10     	; 0x1278 <CALLBACK_HID_Device_CreateHIDReport+0x1a>
	KeyboardReport->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_A;
    126e:	94 e0       	ldi	r25, 0x04	; 4
    1270:	f9 01       	movw	r30, r18
    1272:	92 83       	std	Z+2, r25	; 0x02
    1274:	91 e0       	ldi	r25, 0x01	; 1
    1276:	01 c0       	rjmp	.+2      	; 0x127a <CALLBACK_HID_Device_CreateHIDReport+0x1c>
{
	USB_KeyboardReport_Data_t* KeyboardReport = (USB_KeyboardReport_Data_t*)ReportData;
	
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	uint8_t UsedKeyCodes = 0;
    1278:	90 e0       	ldi	r25, 0x00	; 0

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
	KeyboardReport->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_A;

	if (ButtonStatus_LCL & BUTTONS_BUTTON2)
    127a:	84 ff       	sbrs	r24, 4
    127c:	06 c0       	rjmp	.+12     	; 0x128a <CALLBACK_HID_Device_CreateHIDReport+0x2c>
	KeyboardReport->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_B;
    127e:	f9 01       	movw	r30, r18
    1280:	e9 0f       	add	r30, r25
    1282:	f1 1d       	adc	r31, r1
    1284:	85 e0       	ldi	r24, 0x05	; 5
    1286:	82 83       	std	Z+2, r24	; 0x02
    1288:	9f 5f       	subi	r25, 0xFF	; 255

	if (ButtonStatus_LCL & BUTTONS_BUTTON3)
    128a:	44 23       	and	r20, r20
    128c:	34 f4       	brge	.+12     	; 0x129a <CALLBACK_HID_Device_CreateHIDReport+0x3c>
	KeyboardReport->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_C;
    128e:	f9 01       	movw	r30, r18
    1290:	e9 0f       	add	r30, r25
    1292:	f1 1d       	adc	r31, r1
    1294:	86 e0       	ldi	r24, 0x06	; 6
    1296:	82 83       	std	Z+2, r24	; 0x02
    1298:	9f 5f       	subi	r25, 0xFF	; 255

	if (UsedKeyCodes)
    129a:	99 23       	and	r25, r25
    129c:	19 f0       	breq	.+6      	; 0x12a4 <CALLBACK_HID_Device_CreateHIDReport+0x46>
	KeyboardReport->Modifier = HID_KEYBOARD_MODIFIER_LEFTSHIFT;
    129e:	82 e0       	ldi	r24, 0x02	; 2
    12a0:	f9 01       	movw	r30, r18
    12a2:	80 83       	st	Z, r24

	*ReportSize = sizeof(USB_KeyboardReport_Data_t);
    12a4:	88 e0       	ldi	r24, 0x08	; 8
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	f8 01       	movw	r30, r16
    12aa:	91 83       	std	Z+1, r25	; 0x01
    12ac:	80 83       	st	Z, r24
	return false;
}
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	1f 91       	pop	r17
    12b2:	0f 91       	pop	r16
    12b4:	08 95       	ret

000012b6 <CALLBACK_HID_Device_ProcessHIDReport>:
const uint16_t ReportSize)
{
	uint8_t  LEDMask   = LEDS_NO_LEDS;
	uint8_t* LEDReport = (uint8_t*)ReportData;

	if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
    12b6:	f9 01       	movw	r30, r18
    12b8:	90 81       	ld	r25, Z
    12ba:	90 ff       	sbrs	r25, 0
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <CALLBACK_HID_Device_ProcessHIDReport+0xc>
	LEDMask |= LEDS_LED1;
    12be:	80 e8       	ldi	r24, 0x80	; 128
    12c0:	01 c0       	rjmp	.+2      	; 0x12c4 <CALLBACK_HID_Device_ProcessHIDReport+0xe>
const uint8_t ReportID,
const uint8_t ReportType,
const void* ReportData,
const uint16_t ReportSize)
{
	uint8_t  LEDMask   = LEDS_NO_LEDS;
    12c2:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t* LEDReport = (uint8_t*)ReportData;

	if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
	LEDMask |= LEDS_LED1;

	if (*LEDReport & HID_KEYBOARD_LED_CAPSLOCK)
    12c4:	91 fd       	sbrc	r25, 1
	LEDMask |= LEDS_LED2;
    12c6:	80 64       	ori	r24, 0x40	; 64

	if (*LEDReport & HID_KEYBOARD_LED_SCROLLLOCK)
    12c8:	92 fd       	sbrc	r25, 2
	LEDMask |= LEDS_LED3;
    12ca:	80 62       	ori	r24, 0x20	; 32
}

static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
{
	// turn on only LEDs given in the LEDMask mask here, all others off
	PORTB = ( (PORTB | LEDS_LED1) & ~LEDMask);
    12cc:	95 b1       	in	r25, 0x05	; 5
    12ce:	80 95       	com	r24
    12d0:	90 68       	ori	r25, 0x80	; 128
    12d2:	98 23       	and	r25, r24
    12d4:	95 b9       	out	0x05, r25	; 5
	PORTC = ( (PORTC | LEDS_GB) & ~LEDMask);
    12d6:	98 b1       	in	r25, 0x08	; 8
    12d8:	90 66       	ori	r25, 0x60	; 96
    12da:	89 23       	and	r24, r25
    12dc:	88 b9       	out	0x08, r24	; 8
    12de:	08 95       	ret

000012e0 <memcmp>:
    12e0:	fb 01       	movw	r30, r22
    12e2:	dc 01       	movw	r26, r24
    12e4:	04 c0       	rjmp	.+8      	; 0x12ee <memcmp+0xe>
    12e6:	8d 91       	ld	r24, X+
    12e8:	01 90       	ld	r0, Z+
    12ea:	80 19       	sub	r24, r0
    12ec:	21 f4       	brne	.+8      	; 0x12f6 <memcmp+0x16>
    12ee:	41 50       	subi	r20, 0x01	; 1
    12f0:	50 40       	sbci	r21, 0x00	; 0
    12f2:	c8 f7       	brcc	.-14     	; 0x12e6 <memcmp+0x6>
    12f4:	88 1b       	sub	r24, r24
    12f6:	99 0b       	sbc	r25, r25
    12f8:	08 95       	ret

000012fa <memcpy>:
    12fa:	fb 01       	movw	r30, r22
    12fc:	dc 01       	movw	r26, r24
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <memcpy+0xa>
    1300:	01 90       	ld	r0, Z+
    1302:	0d 92       	st	X+, r0
    1304:	41 50       	subi	r20, 0x01	; 1
    1306:	50 40       	sbci	r21, 0x00	; 0
    1308:	d8 f7       	brcc	.-10     	; 0x1300 <memcpy+0x6>
    130a:	08 95       	ret

0000130c <memset>:
    130c:	dc 01       	movw	r26, r24
    130e:	01 c0       	rjmp	.+2      	; 0x1312 <memset+0x6>
    1310:	6d 93       	st	X+, r22
    1312:	41 50       	subi	r20, 0x01	; 1
    1314:	50 40       	sbci	r21, 0x00	; 0
    1316:	e0 f7       	brcc	.-8      	; 0x1310 <memset+0x4>
    1318:	08 95       	ret

0000131a <_exit>:
    131a:	f8 94       	cli

0000131c <__stop_program>:
    131c:	ff cf       	rjmp	.-2      	; 0x131c <__stop_program>
